#!/usr/bin/env python


import argparse
import os
from ruamel import yaml
import shutil

from arimo.IoT.DataAdmin import Project
from arimo.IoT.DataAdmin._project.settings import _DB_DETAILS_FILE_PATH
from arimo.IoT.DataAdmin.util import _YAML_EXT


parser = argparse.ArgumentParser()

parser.add_argument(
    'project',
    default='TEST')

parser.add_argument(
    '--create',
    action='store_true')

args = parser.parse_args()


db_details_file_path = \
    os.path.join(
        Project.CONFIG_DIR_PATH,
        args.project + _YAML_EXT)

db_details = \
    yaml.safe_load(stream=open(db_details_file_path, 'r'))['db']

assert db_details['host'] \
   and db_details['db_name'] \
   and db_details['user'] \
   and db_details['password']

DB_DETAILS_ORIG_FILE_PATH = _DB_DETAILS_FILE_PATH + '.orig'

assert not os.path.isfile(DB_DETAILS_ORIG_FILE_PATH)

shutil.copyfile(
    src=_DB_DETAILS_FILE_PATH,
    dst=DB_DETAILS_ORIG_FILE_PATH)

assert os.path.isfile(DB_DETAILS_ORIG_FILE_PATH)

shutil.copyfile(
    src=db_details_file_path,
    dst=_DB_DETAILS_FILE_PATH)

os.system(
    'eb {} {}'.format(
        'create' if args.create else 'deploy',
        args.project))

shutil.copyfile(
    src=DB_DETAILS_ORIG_FILE_PATH,
    dst=_DB_DETAILS_FILE_PATH)

os.remove(DB_DETAILS_ORIG_FILE_PATH)

assert not os.path.isfile(DB_DETAILS_ORIG_FILE_PATH)
