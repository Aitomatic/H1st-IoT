#!/usr/bin/env python


from __future__ import print_function
import argparse
import json
import os
from ruamel import yaml

from arimo.util import Namespace

from arimo.IoT.DataAdmin import Project, project, __path__
from arimo.IoT.DataAdmin.util import clean_lower_str, _JSON_EXT, _JSON_FMT, _YAML_EXT, _YAML_FMT


_PACKAGE_NAMESPACE_NAME = 'arimo'
_METADATA_FILE_NAME = 'metadata.json'

_metadata = \
    json.load(
        open(os.path.join(
            os.path.dirname(
                os.path.dirname(
                    os.path.dirname(__path__[0]))),
            _PACKAGE_NAMESPACE_NAME,
            _METADATA_FILE_NAME)))


IN_LOOKUP_TYPE = 'in'
CONTAINS_LOOKUP_TYPE = 'contains'
STARTSWITH_LOOKUP_TYPE = 'startswith'
ENDSWITH_LOOKUP_TYPE = 'endswith'
REGEX_LOOKUP_TYPE = 'regex'


ROM_ARG_NAME = 'rom'

EQ_GEN_TP_ROM = 'gen-tp'
EQ_DATA_FLD_ROM = 'data-fld'
EQ_UNQ_TP_GRP_ROM = 'unq-tp-grp'
EQ_UNQ_TP_ROM = 'unq-tp'
EQ_INST_ROM = 'eq'


DB_OP_ARG_NAME = 'db_op'

COUNT_DB_OP = 'count'
LIST_DB_OP = 'list'
CREATE_DB_OP = 'create'
UPDATE_DB_OP = 'update'
VIEW_DB_OP = 'view'


# MASTER PARSER
parser = \
    argparse.ArgumentParser(
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} >>>'.format(Project.__qual_name__()),   # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {}\n'.format(Project.__qual_name__()),   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=None,   # The global default value for arguments (default: None)
            # *** SUPPRESS cannot be used with store_true/store_false/store_const actions ***
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )

# version
parser.add_argument(
    '-v', '--version',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action='version',   # The basic type of action to be taken when this argument is encountered at the command line.
        # choices: 'store', 'store_const'/'store_true'/'store_false', 'append'/'append_const', 'count', 'help', 'version'
    version=_metadata['VERSION'],
    # nargs=None,   # The number of command-line arguments that should be consumed.
        # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'nargs' ***
    # const=None,   # A constant value required by some action and nargs selections.
        # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'const' ***
    default=None,   # The value produced if the argument is absent from the command line.
    # type=str,   # The type to which the command-line argument should be converted.
        # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'type' ***
    # choices=None,   # A container of the allowable values for the argument.
        # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'choices' ***
    # required=False,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'required' ***
    help='version',   # A brief description of what the argument does.
    # metavar=None,   # A name for the argument in usage messages.
        # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'metavar' ***
    dest='version'   # The name of the attribute to be added to the object returned by parse_args().
)


# Project Name
parser.add_argument(
    '-p', '--project',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action='store',   # The basic type of action to be taken when this argument is encountered at the command line.
        # choices: 'store', 'store_const'/'store_true'/'store_false', 'append'/'append_const', 'count', 'help', 'version'
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    help='{} <ProjectName> associated with "{}/<ProjectName>{}" config file'
        .format(Project.__qual_name__(), Project.CONFIG_DIR_PATH, _YAML_EXT),
        # A brief description of what the argument does.
    metavar='PROJECT_NAME',   # A name for the argument in usage messages.
    dest='project'   # The name of the attribute to be added to the object returned by parse_args()
)


# output format
parser.add_argument(
    '--fmt',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
        # choices: 'store', 'store_const'/'store_true'/'store_false', 'append'/'append_const', 'count', 'help', 'version'
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=_YAML_FMT,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices={_YAML_FMT, _JSON_FMT},   # A container of the allowable values for the argument.
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    help='output format',   # A brief description of what the argument does.
    metavar=None,  # A name for the argument in usage messages.
    dest='output_format'   # The name of the attribute to be added to the object returned by parse_args().
)


# output file
parser.add_argument(
    '-o', '--out',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action='store',   # The basic type of action to be taken when this argument is encountered at the command line.
        # choices: 'store', 'store_const'/'store_true'/'store_false', 'append'/'append_const', 'count', 'help', 'version'
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=None,   # The value produced if the argument is absent from the command line.
    type=argparse.FileType(mode='w'),   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    help='path of file to dump output',   # A brief description of what the argument does.
    metavar='OUTPUT_FILE_PATH',  # A name for the argument in usage messages.
    dest='output_file_path'   # The name of the attribute to be added to the object returned by parse_args().
)


# quiet / verbose
parser___quiet_verbose_mut_excl_grp = \
    parser.add_mutually_exclusive_group(
        required=False)

parser___quiet_verbose_mut_excl_grp.add_argument(
    '-q', '--quiet',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action='store_true',   # The basic type of action to be taken when this argument is encountered at the command line.
        # choices: 'store', 'store_const'/'store_true'/'store_false', 'append'/'append_const', 'count', 'help', 'version'
    # nargs=None,   # The number of command-line arguments that should be consumed.
        # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'nargs' ***
    # const=None,   # A constant value required by some action and nargs selections.
        # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'const' ***
    default=False,   # The value produced if the argument is absent from the command line.
    # type=None,   # The type to which the command-line argument should be converted.
        # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'type' ***
    # choices=None,   # A container of the allowable values for the argument.
        # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'choices' ***
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    help='run in quiet mode',   # A brief description of what the argument does.
    # metavar=None,  # A name for the argument in usage messages.
        # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'metavar' ***
    dest='quiet'   # The name of the attribute to be added to the object returned by parse_args().
)

parser___quiet_verbose_mut_excl_grp.add_argument(
    '-V', '--verbose',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action='store',   # The basic type of action to be taken when this argument is encountered at the command line.
        # choices: 'store', 'store_const'/'store_true'/'store_false', 'append'/'append_const', 'count', 'help', 'version'
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    type=int,   # The type to which the command-line argument should be converted.
    choices=range(3),   # A container of the allowable values for the argument.
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    default=0,   # The value produced if the argument is absent from the command line.
    help='verbosity level',   # A brief description of what the argument does.
    metavar=None,  # A name for the argument in usage messages.
    dest='verbose'   # The name of the attribute to be added to the object returned by parse_args().
)


# ROM Look-Ups
parser___lookup_grp = \
    parser.add_argument_group(
        title='Relational Object Model (ROM) Look-Ups',
        description='Relational Object Model (ROM) Look Ups')

parser___lookup_grp.add_argument(
    '--excl-lkup',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action='store_true',   # The basic type of action to be taken when this argument is encountered at the command line.
        # choices: 'store', 'store_const'/'store_true'/'store_false', 'append'/'append_const', 'count', 'help', 'version'
    # nargs=None,   # The number of command-line arguments that should be consumed.
        # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'nargs' ***
    # const=None,   # A constant value required by some action and nargs selections.
        # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'const' ***
    default=False,   # The value produced if the argument is absent from the command line.
    # type=None,   # The type to which the command-line argument should be converted.
        # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'type' ***
    # choices=None,   # A container of the allowable values for the argument.
        # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'choices' ***
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    help='whether to exclude looked-up ROM objects',   # A brief description of what the argument does.
    # metavar=None,  # A name for the argument in usage messages.
        # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'metavar' ***
    dest='excl_lookups'   # The name of the attribute to be added to the object returned by parse_args().
)

parser___lookup_grp.add_argument(
    '--lkup',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action='store',   # The basic type of action to be taken when this argument is encountered at the command line.
        # choices: 'store', 'store_const'/'store_true'/'store_false', 'append'/'append_const', 'count', 'help', 'version'
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=IN_LOOKUP_TYPE,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=(IN_LOOKUP_TYPE, CONTAINS_LOOKUP_TYPE, STARTSWITH_LOOKUP_TYPE, ENDSWITH_LOOKUP_TYPE, REGEX_LOOKUP_TYPE),
        # A container of the allowable values for the argument.
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    help='look-up method',   # A brief description of what the argument does.
    metavar=None,  # A name for the argument in usage messages.
    dest='lookup_type'   # The name of the attribute to be added to the object returned by parse_args().
)


parser___lookup_grp.add_argument(
    '--lkup-gen-tp',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action='store',   # The basic type of action to be taken when this argument is encountered at the command line.
        # choices: 'store', 'store_const'/'store_true'/'store_false', 'append'/'append_const', 'count', 'help', 'version'
    nargs='+',   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=[],   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    help='Equipment General Type name(s) for look-ups',   # A brief description of what the argument does.
    metavar='EQ_GEN_TP_LOOKUP',  # A name for the argument in usage messages.
    dest='eq_gen_tp_lookups'   # The name of the attribute to be added to the object returned by parse_args().
)

parser___lookup_grp.add_argument(
    '--lkup-data-fld',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action='store',   # The basic type of action to be taken when this argument is encountered at the command line.
        # choices: 'store', 'store_const'/'store_true'/'store_false', 'append'/'append_const', 'count', 'help', 'version'
    nargs='+',   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=[],   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    help='Equipment Data Field name(s) for look-ups',   # A brief description of what the argument does.
    metavar='EQ_DATA_FLD_LOOKUP',  # A name for the argument in usage messages.
    dest='eq_data_fld_lookups'   # The name of the attribute to be added to the object returned by parse_args().
)

parser___lookup_grp.add_argument(
    '--lkup-unq-tp-grp',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action='store',   # The basic type of action to be taken when this argument is encountered at the command line.
        # choices: 'store', 'store_const'/'store_true'/'store_false', 'append'/'append_const', 'count', 'help', 'version'
    nargs='+',   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=[],   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    help='Equipment Unique Type Group name(s) for look-ups',   # A brief description of what the argument does.
    metavar='EQ_UNQ_TP_GRP_LOOKUP',  # A name for the argument in usage messages.
    dest='eq_unq_tp_grp_lookups'   # The name of the attribute to be added to the object returned by parse_args().
)

parser___lookup_grp.add_argument(
    '--lkup-unq-tp',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action='store',   # The basic type of action to be taken when this argument is encountered at the command line.
        # choices: 'store', 'store_const'/'store_true'/'store_false', 'append'/'append_const', 'count', 'help', 'version'
    nargs='+',   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=[],   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    help='Equipment Unique Type name(s) for look-ups',   # A brief description of what the argument does.
    metavar='EQ_UNQ_TP_LOOKUP',  # A name for the argument in usage messages.
    dest='eq_unq_tp_lookups'   # The name of the attribute to be added to the object returned by parse_args().
)

parser___lookup_grp.add_argument(
    '--lkup-eq',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action='store',   # The basic type of action to be taken when this argument is encountered at the command line.
        # choices: 'store', 'store_const'/'store_true'/'store_false', 'append'/'append_const', 'count', 'help', 'version'
    nargs='+',   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=[],   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    help='Equipment Instance ID(s) for look-ups',   # A brief description of what the argument does.
    metavar='EQ_LOOKUP',  # A name for the argument in usage messages.
    dest='eq_lookups',   # The name of the attribute to be added to the object returned by parse_args().
)


# ROM SUB-PARSERS
rom_sub_parsers = \
    parser.add_subparsers(
        title='1ST SUB-COMMAND',   # title for the sub-parser group in help output; by default 'subcommands' if description is provided, otherwise uses title for positional arguments
        description='Relational Object Model (ROM) Class to {}/{}/{}/{}/{}'
            .format(COUNT_DB_OP, LIST_DB_OP, CREATE_DB_OP, UPDATE_DB_OP, VIEW_DB_OP),
            # description for the sub-parser group in help output, by default None
        prog=None,   # usage information that will be displayed with sub-command help, by default the name of the program and any positional arguments before the subparser argument
        parser_class=argparse.ArgumentParser,   # class which will be used to create sub-parser instances, by default the class of the current parser (e.g. ArgumentParser)
        # action=None,   # the basic type of action to be taken when this argument is encountered at the command line
            # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'prog' ***
        dest=ROM_ARG_NAME,   # name of the attribute under which sub-command name will be stored; by default None and no value is stored
        help='name of Relational Object Model (ROM) Class to {}/{}/{}/{}/{}'
            .format(COUNT_DB_OP, LIST_DB_OP, CREATE_DB_OP, UPDATE_DB_OP, VIEW_DB_OP),
            # help for sub-parser group in help output, by default None
        metavar=None   # string presenting available sub-commands in help; by default it is None and presents sub-commands in form {cmd1, cmd2, ..}
    )


# Equipment General Types
parser___eq_gen_tp = \
    rom_sub_parsers.add_parser(
        name=EQ_GEN_TP_ROM,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} Equipment General Types >>>'.format(Project.__qual_name__()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} Equipment General Types\n'.format(Project.__qual_name__()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # other choice: 'resolve'
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )


# Equipment General Types: database operation sub-parsers
eq_gen_tp___db_op_sub_parsers = \
    parser___eq_gen_tp.add_subparsers(
        title='2ND SUB-COMMAND',   # title for the sub-parser group in help output; by default 'subcommands' if description is provided, otherwise uses title for positional arguments
        description='Database Operation on Equipment General Types',   # description for the sub-parser group in help output, by default None
        prog=None,   # usage information that will be displayed with sub-command help, by default the name of the program and any positional arguments before the subparser argument
        parser_class=argparse.ArgumentParser,   # class which will be used to create sub-parser instances, by default the class of the current parser (e.g. ArgumentParser)
        # action=None,   # the basic type of action to be taken when this argument is encountered at the command line
            # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'prog' ***
        dest=DB_OP_ARG_NAME,   # name of the attribute under which sub-command name will be stored; by default None and no value is stored
        help='database operation on Equipment General Types',   # help for sub-parser group in help output, by default None
        metavar=None   # string presenting available sub-commands in help; by default it is None and presents sub-commands in form {cmd1, cmd2, ..}
    )


# Equipment General Types: COUNT
parser___eq_gen_tp___count = \
    eq_gen_tp___db_op_sub_parsers.add_parser(
        name=COUNT_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment General Types >>>'
            .format(Project.__qual_name__(), COUNT_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment General Types\n'
            .format(Project.__qual_name__(), COUNT_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # other choice: 'resolve'
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )


# Equipment General Types: LIST
parser___eq_gen_tp___list = \
    eq_gen_tp___db_op_sub_parsers.add_parser(
        name=LIST_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment General Types >>>'
            .format(Project.__qual_name__(), LIST_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment General Types\n'
            .format(Project.__qual_name__(), LIST_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # other choice: 'resolve'
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )


# Equipment General Types: CREATE
parser___eq_gen_tp___create = \
    eq_gen_tp___db_op_sub_parsers.add_parser(
        name=CREATE_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment General Types >>>'
            .format(Project.__qual_name__(), CREATE_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment General Types\n'
            .format(Project.__qual_name__(), CREATE_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )

parser___eq_gen_tp___create.add_argument(
    'eq_gen_tp_names',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action='store',   # The basic type of action to be taken when this argument is encountered at the command line.
        # choices: 'store', 'store_const'/'store_true'/'store_false', 'append'/'append_const', 'count', 'help', 'version'
    nargs='+',   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=[],   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='name(s) of Equipment General Type(s) to create',   # A brief description of what the argument does.
    metavar='EQ_GEN_TP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)


# Equipment General Types: UPDATE
parser___eq_gen_tp___update = \
    eq_gen_tp___db_op_sub_parsers.add_parser(
        name=UPDATE_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment General Types >>>'
            .format(Project.__qual_name__(), UPDATE_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment General Types\n'
            .format(Project.__qual_name__(), UPDATE_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )

parser___eq_gen_tp___update.add_argument(
    'curr_eq_gen_tp_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='current Equipment General Type name',   # A brief description of what the argument does.
    metavar='CURR_EQ_GEN_TP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)

parser___eq_gen_tp___update.add_argument(
    'new_eq_gen_tp_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='new Equipment General Type name',   # A brief description of what the argument does.
    metavar='NEW_EQ_GEN_TP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)


# Equipment General Types: VIEW
parser___eq_gen_tp___view = \
    eq_gen_tp___db_op_sub_parsers.add_parser(
        name=VIEW_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment General Types >>>'
            .format(Project.__qual_name__(), VIEW_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment General Types\n'
            .format(Project.__qual_name__(), VIEW_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )


parser___eq_gen_tp___view.add_argument(
    'eq_gen_tp_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='name of Equipment General Type',   # A brief description of what the argument does.
    metavar='EQ_GEN_TP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)


# Equipment Data Fields
parser___eq_data_fld = \
    rom_sub_parsers.add_parser(
        name=EQ_DATA_FLD_ROM,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} Equipment Data Fields >>>'.format(Project.__qual_name__()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} Equipment Data Fields\n'.format(Project.__qual_name__()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )

parser___eq_data_fld.add_argument(
    '--ctl',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action='store_true',   # The basic type of action to be taken when this argument is encountered at the command line.
    # nargs=None,   # The number of command-line arguments that should be consumed.
    # const=None,   # A constant value required by some action and nargs selections.
    default=False,   # The value produced if the argument is absent from the command line.
    # type=None,   # The type to which the command-line argument should be converted.
    # choices=None,   # A container of the allowable values for the argument.
        # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'choices' ***
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    help='Equipment Data Field(s): Control',   # A brief description of what the argument does.
    # metavar=None,   # A name for the argument in usage messages.
    dest='eq_data_fld_control'   # The name of the attribute to be added to the object returned by parse_args().
)

parser___eq_data_fld.add_argument(
    '--msr',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action='store_true',   # The basic type of action to be taken when this argument is encountered at the command line.
    # nargs=None,   # The number of command-line arguments that should be consumed.
    # const=None,   # A constant value required by some action and nargs selections.
    default=False,   # The value produced if the argument is absent from the command line.
    # type=None,   # The type to which the command-line argument should be converted.
    # choices=None,   # A container of the allowable values for the argument.
        # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'choices' ***
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    help='Equipment Data Field(s): Measurement',   # A brief description of what the argument does.
    # metavar=None,   # A name for the argument in usage messages.
    dest='eq_data_fld_measure'   # The name of the attribute to be added to the object returned by parse_args().
)

parser___eq_data_fld.add_argument(
    '--cat',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action='store_true',   # The basic type of action to be taken when this argument is encountered at the command line.
    # nargs=None,   # The number of command-line arguments that should be consumed.
    # const=None,   # A constant value required by some action and nargs selections.
    default=False,   # The value produced if the argument is absent from the command line.
    # type=None,   # The type to which the command-line argument should be converted.
    # choices=None,   # A container of the allowable values for the argument.
        # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'choices' ***
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    help='Equipment Data Field(s): Categorical',   # A brief description of what the argument does.
    # metavar=None,   # A name for the argument in usage messages.
    dest='eq_data_fld_cat'   # The name of the attribute to be added to the object returned by parse_args().
)

parser___eq_data_fld.add_argument(
    '--num',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action='store_true',   # The basic type of action to be taken when this argument is encountered at the command line.
    # nargs=None,   # The number of command-line arguments that should be consumed.
    # const=None,   # A constant value required by some action and nargs selections.
    default=False,   # The value produced if the argument is absent from the command line.
    # type=None,   # The type to which the command-line argument should be converted.
    # choices=None,   # A container of the allowable values for the argument.
        # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'choices' ***
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    help='Equipment Data Field(s): Numerical',   # A brief description of what the argument does.
    # metavar=None,   # A name for the argument in usage messages.
    dest='eq_data_fld_num'   # The name of the attribute to be added to the object returned by parse_args().
)


parser___eq_data_fld.add_argument(
    '--non-nullable',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action='store_true',   # The basic type of action to be taken when this argument is encountered at the command line.
    # nargs=None,   # The number of command-line arguments that should be consumed.
    # const=None,   # A constant value required by some action and nargs selections.
    default=False,   # The value produced if the argument is absent from the command line.
    # type=None,   # The type to which the command-line argument should be converted.
    # choices=None,   # A container of the allowable values for the argument.
        # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'choices' ***
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    help='Equipment Data Field(s): Non-Nullable',   # A brief description of what the argument does.
    # metavar=None,   # A name for the argument in usage messages.
    dest='eq_data_fld_non_nullable'   # The name of the attribute to be added to the object returned by parse_args().
)

parser___eq_data_fld.add_argument(
    '--lwr-num-null',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=None,   # The value produced if the argument is absent from the command line.
    type=float,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    help='Equipment Data Field(s): Lower Numeric NULL',   # A brief description of what the argument does.
    metavar='EQ_DATA_FLD_LOWER_NUMERIC_NULL',   # A name for the argument in usage messages.
    dest='eq_data_fld_lower_numeric_null'   # The name of the attribute to be added to the object returned by parse_args().
)

parser___eq_data_fld.add_argument(
    '--upr-num-null',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=None,   # The value produced if the argument is absent from the command line.
    type=float,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    help='Equipment Data Field(s): Upper Numeric NULL',   # A brief description of what the argument does.
    metavar='EQ_DATA_FLD_UPPER_NUMERIC_NULL',   # A name for the argument in usage messages.
    dest='eq_data_fld_upper_numeric_null'   # The name of the attribute to be added to the object returned by parse_args().
)

parser___eq_data_fld.add_argument(
    '--default',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=None,   # The value produced if the argument is absent from the command line.
    type=float,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    help='Equipment Data Field(s): Default Value',   # A brief description of what the argument does.
    metavar='EQ_DATA_FLD_DEFAULT',   # A name for the argument in usage messages.
    dest='eq_data_fld_default'   # The name of the attribute to be added to the object returned by parse_args().
)

parser___eq_data_fld.add_argument(
    '--min',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=None,   # The value produced if the argument is absent from the command line.
    type=float,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    help='Equipment Data Field(s): Min Value',   # A brief description of what the argument does.
    metavar='EQ_DATA_FLD_MIN',   # A name for the argument in usage messages.
    dest='eq_data_fld_min'   # The name of the attribute to be added to the object returned by parse_args().
)

parser___eq_data_fld.add_argument(
    '--max',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=None,   # The value produced if the argument is absent from the command line.
    type=float,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    required=False,   # Whether or not the command-line option may be omitted (optionals only).
    help='Equipment Data Field(s): Max Value',   # A brief description of what the argument does.
    metavar='EQ_DATA_FLD_MAX',   # A name for the argument in usage messages.
    dest='eq_data_fld_max'   # The name of the attribute to be added to the object returned by parse_args().
)


# Equipment Data Fields: database operation sub-parsers
eq_data_fld___db_op_sub_parsers = \
    parser___eq_data_fld.add_subparsers(
        title='2ND SUB-COMMAND',   # title for the sub-parser group in help output; by default 'subcommands' if description is provided, otherwise uses title for positional arguments
        description='Database Operation on Equipment Data Fields',  # description for the sub-parser group in help output, by default None
        prog=None,   # usage information that will be displayed with sub-command help, by default the name of the program and any positional arguments before the subparser argument
        parser_class=argparse.ArgumentParser,   # class which will be used to create sub-parser instances, by default the class of the current parser (e.g. ArgumentParser)
        # action=None,   # the basic type of action to be taken when this argument is encountered at the command line
            # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'prog' ***
        dest=DB_OP_ARG_NAME,   # name of the attribute under which sub-command name will be stored; by default None and no value is stored
        help='database operation on Equipment Data Fields',   # help for sub-parser group in help output, by default None
        metavar=None   # string presenting available sub-commands in help; by default it is None and presents sub-commands in form {cmd1, cmd2, ..}
    )


# Equipment Data Fields: COUNT
parser___eq_data_fld___count = \
    eq_data_fld___db_op_sub_parsers.add_parser(
        name=COUNT_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment Data Fields >>>'
            .format(Project.__qual_name__(), COUNT_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment Data Fields\n'
            .format(Project.__qual_name__(), COUNT_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )


# Equipment Data Fields: LIST
parser___eq_data_fld___list = \
    eq_data_fld___db_op_sub_parsers.add_parser(
        name=LIST_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment Data Fields >>>'
            .format(Project.__qual_name__(), LIST_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment Data Fields\n'
            .format(Project.__qual_name__(), LIST_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )


# Equipment Data Fields: CREATE
parser___eq_data_fld___create = \
    eq_data_fld___db_op_sub_parsers.add_parser(
        name=CREATE_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment Data Fields >>>'
            .format(Project.__qual_name__(), CREATE_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment Data Fields\n'
            .format(Project.__qual_name__(), CREATE_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )

parser___eq_data_fld___create.add_argument(
    'eq_gen_tp_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='Equipment General Type name',   # A brief description of what the argument does.
    metavar='EQ_GEN_TP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)

parser___eq_data_fld___create.add_argument(
    'eq_data_fld_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='name of Equipment Data Field to create',   # A brief description of what the argument does.
    metavar='EQ_DATA_FLD_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)


# Equipment Data Fields: UPDATE
parser___eq_data_fld___update = \
    eq_data_fld___db_op_sub_parsers.add_parser(
        name=UPDATE_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment Data Fields >>>'
            .format(Project.__qual_name__(), UPDATE_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment Data Fields\n'
            .format(Project.__qual_name__(), UPDATE_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )

parser___eq_data_fld___update.add_argument(
    'eq_gen_tp_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='Equipment General Type name',   # A brief description of what the argument does.
    metavar='EQ_GEN_TP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)

parser___eq_data_fld___update.add_argument(
    'eq_data_fld_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='name of Equipment Data Field to update',   # A brief description of what the argument does.
    metavar='EQ_DATA_FLD_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)


# Equipment Data Fields: VIEW
parser___eq_data_fld___view = \
    eq_data_fld___db_op_sub_parsers.add_parser(
        name=VIEW_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment Data Fields >>>'
            .format(Project.__qual_name__(), VIEW_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment Data Fields\n'
            .format(Project.__qual_name__(), VIEW_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )

parser___eq_data_fld___view.add_argument(
    'eq_gen_tp_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='Equipment General Type name',   # A brief description of what the argument does.
    metavar='EQ_GEN_TP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)

parser___eq_data_fld___view.add_argument(
    'eq_data_fld_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='name of Equipment Data Field to view',   # A brief description of what the argument does.
    metavar='EQ_DATA_FLD_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)


# Equipment Unique Type Groups
parser___eq_unq_tp_grp = \
    rom_sub_parsers.add_parser(
        name=EQ_UNQ_TP_GRP_ROM,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} Equipment Unique Type Groups >>>'
            .format(Project.__qual_name__()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} Equipment Unique Type Groups\n'
            .format(Project.__qual_name__()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )

# Equipment Unique Type Groups: database operation sub-parsers
eq_unq_tp_grp___db_op_sub_parsers = \
    parser___eq_unq_tp_grp.add_subparsers(
        title='2ND SUB-COMMAND',   # title for the sub-parser group in help output; by default 'subcommands' if description is provided, otherwise uses title for positional arguments
        description='Database Operation on Equipment Unique Type Groups',   # description for the sub-parser group in help output, by default None
        prog=None,   # usage information that will be displayed with sub-command help, by default the name of the program and any positional arguments before the subparser argument
        parser_class=argparse.ArgumentParser,   # class which will be used to create sub-parser instances, by default the class of the current parser (e.g. ArgumentParser)
        # action=None,   # the basic type of action to be taken when this argument is encountered at the command line
            # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'prog' ***
        dest=DB_OP_ARG_NAME,   # name of the attribute under which sub-command name will be stored; by default None and no value is stored
        help='database operation on Equipment Unique Type Groups',   # help for sub-parser group in help output, by default None
        metavar=None   # string presenting available sub-commands in help; by default it is None and presents sub-commands in form {cmd1, cmd2, ..}
    )


# Equipment Unique Type Groups: COUNT
parser___eq_unq_tp_grp___count = \
    eq_unq_tp_grp___db_op_sub_parsers.add_parser(
        name=COUNT_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment Unique Type Groups >>>'
            .format(Project.__qual_name__(), COUNT_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment Unique Type Groups\n'
            .format(Project.__qual_name__(), COUNT_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )


# Equipment Unique Type Groups: LIST
parser___eq_unq_tp_grp___list = \
    eq_unq_tp_grp___db_op_sub_parsers.add_parser(
        name=LIST_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment Unique Type Groups >>>'
            .format(Project.__qual_name__(), LIST_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment Unique Type Groups\n'
            .format(Project.__qual_name__(), LIST_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )


# Equipment Unique Type Groups: CREATE
parser___eq_unq_tp_grp___create = \
    eq_unq_tp_grp___db_op_sub_parsers.add_parser(
        name=CREATE_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment Unique Type Groups >>>'
            .format(Project.__qual_name__(), CREATE_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment Unique Type Groups\n'
            .format(Project.__qual_name__(), CREATE_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )

parser___eq_unq_tp_grp___create.add_argument(
    'eq_gen_tp_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='Equipment General Type name',   # A brief description of what the argument does.
    metavar='EQ_GEN_TP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)

parser___eq_unq_tp_grp___create.add_argument(
    'eq_unq_tp_grp_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='name of Equipment Unique Type Group to create',   # A brief description of what the argument does.
    metavar='EQ_UNQ_TP_GRP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)


# Equipment Unique Type Groups: UPDATE
parser___eq_unq_tp_grp___update = \
    eq_unq_tp_grp___db_op_sub_parsers.add_parser(
        name=UPDATE_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment Unique Type Groups >>>'
            .format(Project.__qual_name__(), UPDATE_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment Unique Type Groups\n'
            .format(Project.__qual_name__(), UPDATE_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )

parser___eq_unq_tp_grp___update.add_argument(
    'eq_gen_tp_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='Equipment General Type name',   # A brief description of what the argument does.
    metavar='EQ_GEN_TP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)

parser___eq_unq_tp_grp___update.add_argument(
    'eq_unq_tp_grp_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='name of Equipment Unique Type Group to update',   # A brief description of what the argument does.
    metavar='EQ_UNQ_TP_GRP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)


# Equipment Unique Type Groups: VIEW
parser___eq_unq_tp_grp___view = \
    eq_unq_tp_grp___db_op_sub_parsers.add_parser(
        name=VIEW_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment Unique Type Groups >>>'
            .format(Project.__qual_name__(), VIEW_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment Unique Type Groups\n'
            .format(Project.__qual_name__(), VIEW_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )

parser___eq_unq_tp_grp___view.add_argument(
    'eq_gen_tp_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='name of Equipment General Type',   # A brief description of what the argument does.
    metavar='EQ_GEN_TP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument ***
)

parser___eq_unq_tp_grp___view.add_argument(
    'eq_unq_tp_grp_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='name of Equipment Unique Type Group to view',   # A brief description of what the argument does.
    metavar='EQ_UNQ_TP_GRP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument ***
)


# Equipment Unique Types
parser___eq_unq_tp = \
    rom_sub_parsers.add_parser(
        name=EQ_UNQ_TP_ROM,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} Equipment Unique Types >>>'
            .format(Project.__qual_name__()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} Equipment Unique Types\n'
            .format(Project.__qual_name__()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )

# Equipment Unique Types: database operation sub-parsers
eq_unq_tp___db_op_sub_parsers = \
    parser___eq_unq_tp.add_subparsers(
        title='2ND SUB-COMMAND',   # title for the sub-parser group in help output; by default 'subcommands' if description is provided, otherwise uses title for positional arguments
        description='Database Operation on Equipment Unique Types',   # description for the sub-parser group in help output, by default None
        prog=None,   # usage information that will be displayed with sub-command help, by default the name of the program and any positional arguments before the subparser argument
        parser_class=argparse.ArgumentParser,   # class which will be used to create sub-parser instances, by default the class of the current parser (e.g. ArgumentParser)
        # action=None,   # the basic type of action to be taken when this argument is encountered at the command line
            # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'prog' ***
        dest=DB_OP_ARG_NAME,   # name of the attribute under which sub-command name will be stored; by default None and no value is stored
        help='database operation on Equipment Unique Type',   # help for sub-parser group in help output, by default None
        metavar=None   # string presenting available sub-commands in help; by default it is None and presents sub-commands in form {cmd1, cmd2, ..}
    )


# Equipment Unique Types: COUNT
parser___eq_unq_tp___count = \
    eq_unq_tp___db_op_sub_parsers.add_parser(
        name=COUNT_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment Unique Types >>>'
            .format(Project.__qual_name__(), COUNT_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment Unique Types\n'
            .format(Project.__qual_name__(), COUNT_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )


# Equipment Unique Types: LIST
parser___eq_unq_tp___list = \
    eq_unq_tp___db_op_sub_parsers.add_parser(
        name=LIST_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment Unique Types >>>'
            .format(Project.__qual_name__(), LIST_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment Unique Types\n'
            .format(Project.__qual_name__(), LIST_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )


# Equipment Unique Types: CREATE
parser___eq_unq_tp___create = \
    eq_unq_tp___db_op_sub_parsers.add_parser(
        name=CREATE_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment Unique Types >>>'
            .format(Project.__qual_name__(), CREATE_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment Unique Types\n'
            .format(Project.__qual_name__(), CREATE_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )

parser___eq_unq_tp___create.add_argument(
    'eq_gen_tp_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='Equipment General Type name',   # A brief description of what the argument does.
    metavar='EQ_GEN_TP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)

parser___eq_unq_tp___create.add_argument(
    'eq_unq_tp_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='name of Equipment Unique Type Group to create',   # A brief description of what the argument does.
    metavar='EQ_UNQ_TP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)


# Equipment Unique Types: UPDATE
parser___eq_unq_tp___update = \
    eq_unq_tp___db_op_sub_parsers.add_parser(
        name=UPDATE_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment Unique Types >>>'
            .format(Project.__qual_name__(), UPDATE_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment Unique Types\n'
            .format(Project.__qual_name__(), UPDATE_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )

parser___eq_unq_tp___update.add_argument(
    'eq_gen_tp_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='Equipment General Type name',   # A brief description of what the argument does.
    metavar='EQ_GEN_TP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)

parser___eq_unq_tp___update.add_argument(
    'eq_unq_tp_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='name of Equipment Unique Type to update',   # A brief description of what the argument does.
    metavar='EQ_UNQ_TP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)


# Equipment Unique Types: VIEW
parser___eq_unq_tp___view = \
    eq_unq_tp___db_op_sub_parsers.add_parser(
        name=VIEW_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment Unique Types >>>'
            .format(Project.__qual_name__(), VIEW_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment Unique Types\n'
            .format(Project.__qual_name__(), VIEW_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )

parser___eq_unq_tp___view.add_argument(
    'eq_gen_tp_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='name of Equipment General Type',   # A brief description of what the argument does.
    metavar='EQ_GEN_TP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)

parser___eq_unq_tp___view.add_argument(
    'eq_unq_tp_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='name of Equipment Unique Type Group to view',   # A brief description of what the argument does.
    metavar='EQ_UNQ_TP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)


# Equipment Instances
parser___eq = \
    rom_sub_parsers.add_parser(
        name=EQ_INST_ROM,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} Equipment Instances >>>'
            .format(Project.__qual_name__()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} Equipment Instances\n'
            .format(Project.__qual_name__()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )

# Equipment Instances: database operation sub-parsers
eq___db_op_sub_parsers = \
    parser___eq.add_subparsers(
        title='2ND SUB-COMMAND',   # title for the sub-parser group in help output; by default 'subcommands' if description is provided, otherwise uses title for positional arguments
        description='Database Operation on Equipment Instances',   # description for the sub-parser group in help output, by default None
        prog=None,   # usage information that will be displayed with sub-command help, by default the name of the program and any positional arguments before the subparser argument
        parser_class=argparse.ArgumentParser,   # class which will be used to create sub-parser instances, by default the class of the current parser (e.g. ArgumentParser)
        # action=None,   # the basic type of action to be taken when this argument is encountered at the command line
            # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'prog' ***
        dest=DB_OP_ARG_NAME,   # name of the attribute under which sub-command name will be stored; by default None and no value is stored
        help='database operation on Equipment Instances',   # help for sub-parser group in help output, by default None
        metavar=None   # string presenting available sub-commands in help; by default it is None and presents sub-commands in form {cmd1, cmd2, ..}
    )


# Equipment Instances: COUNT
parser___eq___count = \
    eq___db_op_sub_parsers.add_parser(
        name=COUNT_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment Instances >>>'
            .format(Project.__qual_name__(), COUNT_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment Instances\n'
            .format(Project.__qual_name__(), COUNT_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )


# Equipment Instances: LIST
parser___eq___list = \
    eq___db_op_sub_parsers.add_parser(
        name=LIST_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment Instances >>>'
            .format(Project.__qual_name__(), LIST_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment Instances\n'
            .format(Project.__qual_name__(), LIST_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )


# Equipment Instances: CREATE
parser___eq___create = \
    eq___db_op_sub_parsers.add_parser(
        name=CREATE_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment Instances >>>'
            .format(Project.__qual_name__(), CREATE_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment Instances\n'
            .format(Project.__qual_name__(), CREATE_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )

parser___eq___create.add_argument(
    'eq_gen_tp_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='Equipment General Type name',   # A brief description of what the argument does.
    metavar='EQ_GEN_TP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)

parser___eq___create.add_argument(
    'eq_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='name of Equipment Instance to create',   # A brief description of what the argument does.
    metavar='EQ_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)


# Equipment Instances: UPDATE
parser___eq___update = \
    eq___db_op_sub_parsers.add_parser(
        name=UPDATE_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment Instances >>>'
            .format(Project.__qual_name__(), UPDATE_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment Instances\n'
            .format(Project.__qual_name__(), UPDATE_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )

parser___eq___update.add_argument(
    'eq_gen_tp_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='Equipment General Type name',   # A brief description of what the argument does.
    metavar='EQ_GEN_TP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)

parser___eq___update.add_argument(
    'eq_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='name of Equipment Instance to update',   # A brief description of what the argument does.
    metavar='EQ_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)


# Equipment Instances: VIEW
parser___eq___view = \
    eq___db_op_sub_parsers.add_parser(
        name=VIEW_DB_OP,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description='%(prog)s: CLI for {} to {} Equipment Instances >>>'
            .format(Project.__qual_name__(), VIEW_DB_OP.upper()),
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: CLI for {} to {} Equipment Instances\n'
            .format(Project.__qual_name__(), VIEW_DB_OP.upper()),
            # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.RawDescriptionHelpFormatter,   # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars='@',   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
            # *** other choice: 'resolve' ***
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
            # *** ADDED FROM PY3.5 ***
    )

parser___eq___view.add_argument(
    'eq_gen_tp_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='Equipment General Type name',   # A brief description of what the argument does.
    metavar='EQ_GEN_TP_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)

parser___eq___view.add_argument(
    'eq_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    choices=None,   # A container of the allowable values for the argument.
    # required=True,   # Whether or not the command-line option may be omitted (optionals only).
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
    help='name of Equipment Instance to view',   # A brief description of what the argument does.
    metavar='EQ_NAME',   # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)


# parse args
args = Namespace(**parser.parse_args().__dict__)


assert args.lookup_type \
    in (IN_LOOKUP_TYPE,
        CONTAINS_LOOKUP_TYPE,
        STARTSWITH_LOOKUP_TYPE,
        ENDSWITH_LOOKUP_TYPE,
        REGEX_LOOKUP_TYPE)


args.eq_gen_tp_lookups = \
    [clean_lower_str(eq_gen_tp_lookup)
     for eq_gen_tp_lookup in args.eq_gen_tp_lookups]

args.eq_data_fld_lookups = \
    [clean_lower_str(eq_data_fld_lookup)
     for eq_data_fld_lookup in args.eq_data_fld_lookups]

args.eq_unq_tp_grp_lookups = \
    [clean_lower_str(eq_unq_tp_grp_lookup)
     for eq_unq_tp_grp_lookup in args.eq_unq_tp_grp_lookups]

args.eq_unq_tp_lookups = \
    [clean_lower_str(eq_unq_tp_lookup)
     for eq_unq_tp_lookup in args.eq_unq_tp_lookups]

args.eq_lookups = \
    [clean_lower_str(eq_lookup)
     for eq_lookup in args.eq_lookups]


assert args.output_format in (_JSON_FMT, _YAML_FMT)

if args.output_file_path:
    _ext = os.path.splitext(args.output_file_path)

    if (_ext == _JSON_EXT) and (args.output_format == _YAML_FMT):
        args.output_format = _JSON_FMT

    elif (_ext == _YAML_EXT) and (args.output_format == _JSON_FMT):
        args.output_format = _YAML_FMT


if args.verbose:
    print('\n', args, sep='')


# connect to database
PROJECT = project(name=args.project)


# work
rom = args[ROM_ARG_NAME]
db_op = args[DB_OP_ARG_NAME]

if rom == EQ_GEN_TP_ROM:
    if db_op in (COUNT_DB_OP, LIST_DB_OP):
        if args.eq_gen_tp_lookups:
            if args.lookup_type == IN_LOOKUP_TYPE:
                eq_gen_tps = \
                    (PROJECT.data.EquipmentGeneralTypes.exclude(name=args.eq_gen_tp_lookups[0])
                     if args.excl_lookups
                     else PROJECT.data.EquipmentGeneralTypes.filter(name=args.eq_gen_tp_lookups[0])) \
                    if len(args.eq_gen_tp_lookups) == 1 \
                    else (PROJECT.data.EquipmentGeneralTypes.exclude(name__in=args.eq_gen_tp_lookups)
                          if args.excl_lookups
                          else PROJECT.data.EquipmentGeneralTypes.filter(name__in=args.eq_gen_tp_lookups))

            else:
                for i, eq_gen_tp_lookup in enumerate(args.eq_gen_tp_lookups):
                    _filtered_eq_gen_tps = \
                        PROJECT.data.EquipmentGeneralTypes.filter(
                            **{'name__{}'.format(args.lookup_type): eq_gen_tp_lookup})

                    if i:
                        eq_gen_tps |= _filtered_eq_gen_tps

                    else:
                        eq_gen_tps = _filtered_eq_gen_tps

                if args.excl_lookups:
                    eq_gen_tps = \
                        PROJECT.data.EquipmentGeneralTypes.difference(eq_gen_tps)

        else:
            eq_gen_tps = PROJECT.data.EquipmentGeneralTypes.all()

        if db_op == COUNT_DB_OP:
            results = eq_gen_tps.count()

        else:
            results = \
                [str(eq_gen_tp)
                 for eq_gen_tp in eq_gen_tps]

            print('\n{:,} Equipment General Type(s)'.format(len(results)))

    elif db_op == CREATE_DB_OP:
        results = \
            [str(PROJECT.create_equipment_general_type(
                equipment_general_type_name=eq_gen_tp_name))
             for eq_gen_tp_name in args.eq_gen_tp_names]

        print('\n{:,} Equipment General Type(s)'.format(len(results)))

    elif db_op == UPDATE_DB_OP:
        eq_gen_tp = \
            PROJECT.equipment_general_type(
                equipment_general_type_name=args.curr_eq_gen_tp_name)

        new_eq_gen_tp_name = clean_lower_str(args.new_eq_gen_tp_name)

        if new_eq_gen_tp_name != eq_gen_tp.name:
            eq_gen_tp.name = new_eq_gen_tp_name
            eq_gen_tp.save()

        results = str(eq_gen_tp)

    else:
        assert db_op == VIEW_DB_OP, \
            '*** 2nd SUB-COMMENT MUST BE AMONG: {}, {}, {}, {} & {} ***'.format(
                COUNT_DB_OP, LIST_DB_OP, CREATE_DB_OP, UPDATE_DB_OP, VIEW_DB_OP)

        args.eq_gen_tp_name = \
            clean_lower_str(args.eq_gen_tp_name)

        eq_gen_tp = \
            PROJECT.equipment_general_type(
                equipment_general_type_name=args.eq_gen_tp_name)

        eq_unq_tp_grp_strs = \
            [str(eq_unq_tp_grp)
             for eq_unq_tp_grp in
                PROJECT.data.EquipmentUniqueTypeGroups.filter(
                    equipment_general_type__name=args.eq_gen_tp_name)]

        eq_unq_tp_strs = \
            [str(eq_unq_tp)
             for eq_unq_tp in
                PROJECT.data.EquipmentUniqueTypes.filter(
                    equipment_general_type__name=args.eq_gen_tp_name)]

        eq_data_fld_strs = \
            [str(eq_data_fld)
             for eq_data_fld in
                PROJECT.data.EquipmentDataFields.filter(
                    equipment_general_type__name=args.eq_gen_tp_name)]

        results = \
            {str(eq_gen_tp):
                {'{:,} Equipment Unique Type Groups'.format(len(eq_unq_tp_grp_strs)): eq_unq_tp_grp_strs,
                 '{:,} Equipment Unique Types'.format(len(eq_unq_tp_strs)): eq_unq_tp_strs,
                 '{:,} Equipment Data Fields'.format(len(eq_data_fld_strs)): eq_data_fld_strs}}


elif rom == EQ_DATA_FLD_ROM:
    if db_op in (COUNT_DB_OP, LIST_DB_OP):
        if args.eq_data_fld_lookups:
            if args.lookup_type == IN_LOOKUP_TYPE:
                eq_data_flds = \
                    PROJECT.data.EquipmentDataFields.filter(name=args.eq_data_fld_lookups[0]) \
                    if len(args.eq_data_fld_lookups) == 1 \
                    else PROJECT.data.EquipmentDataFields.filter(name__in=args.eq_data_fld_lookups)

            else:
                for i, eq_data_fld_lookup in enumerate(args.eq_data_fld_lookups):
                    _filtered_eq_data_flds = \
                        PROJECT.data.EquipmentDataFields.filter(
                            **{'name__{}'.format(args.lookup_type): eq_data_fld_lookup})

                    if i:
                        eq_data_flds |= _filtered_eq_data_flds

                    else:
                        eq_data_flds = _filtered_eq_data_flds

        else:
            eq_data_flds = PROJECT.data.EquipmentDataFields.all()

        if args.eq_gen_tp_lookups:
            eq_data_flds = \
                eq_data_flds.filter(
                    equipment_general_type__name=args.eq_gen_tp_lookups[0]) \
                if len(args.eq_gen_tp_lookups) == 1 \
                else eq_data_flds.filter(
                    equipment_general_type__name__in=args.eq_gen_tp_lookups)

        if args.eq_unq_tp_lookups:
            eq_data_flds = \
                eq_data_flds.filter(
                    equipment_unique_types__name=args.eq_unq_tp_lookups[0]) \
                if len(args.eq_unq_tp_lookups) == 1 \
                else eq_data_flds.filter(
                    equipment_unique_types__name__in=args.eq_unq_tp_lookups)

        if args.eq_data_fld_control:
            eq_data_flds = \
                eq_data_flds.filter(
                    equipment_data_field_type=PROJECT.CONTROL_EQUIPMENT_DATA_FIELD_TYPE)

        elif args.eq_data_fld_measure:
            eq_data_flds = \
                eq_data_flds.filter(
                    equipment_data_field_type=PROJECT.MEASURE_EQUIPMENT_DATA_FIELD_TYPE)

        if args.eq_data_fld_cat:
            eq_data_flds = \
                eq_data_flds.filter(
                    data_type=PROJECT.CAT_DATA_TYPE)

        elif args.eq_data_fld_num:
            eq_data_flds = \
                eq_data_flds.filter(
                    data_type=PROJECT.NUM_DATA_TYPE)

        if args.eq_data_fld_non_nullable:
            eq_data_flds = \
                eq_data_flds.filter(
                    nullable=False)

        if args.eq_data_fld_lower_numeric_null:
            eq_data_flds = \
                eq_data_flds.filter(
                    lower_numeric_null=args.eq_data_fld_lower_numeric_null)

        if args.eq_data_fld_upper_numeric_null:
            eq_data_flds = \
                eq_data_flds.filter(
                    upper_numeric_null=args.eq_data_fld_upper_numeric_null)

        if args.eq_data_fld_default:
            eq_data_flds = \
                eq_data_flds.filter(
                    default_val=args.eq_data_fld_default)

        if args.eq_data_fld_min:
            eq_data_flds = \
                eq_data_flds.filter(
                    min_val=args.eq_data_fld_min)

        if args.eq_data_fld_max:
            eq_data_flds = \
                eq_data_flds.filter(
                    max_val=args.eq_data_fld_max)

        if args.excl_lookups:
            eq_data_flds = \
                PROJECT.data.EquipmentDataFields.difference(eq_data_flds)

        if db_op == COUNT_DB_OP:
            results = eq_data_flds.count()

        else:
            results = \
                [str(eq_data_fld)
                 for eq_data_fld in eq_data_flds]

            print('\n{:,} Equipment Data Field(s)'.format(len(results)))

    elif db_op in (CREATE_DB_OP, UPDATE_DB_OP):
        kwargs = {}

        if args.eq_data_fld_non_nullable:
            kwargs['nullable'] = False

        if args.eq_data_fld_lower_numeric_null:
            kwargs['lower_numeric_null'] = args.eq_data_fld_lower_numeric_null

        if args.eq_data_fld_upper_numeric_null:
            kwargs['upper_numeric_null'] = args.eq_data_fld_upper_numeric_null

        if args.eq_data_fld_default:
            kwargs['default_val'] = args.eq_data_fld_default

        if args.eq_data_fld_min:
            kwargs['min_val'] = args.eq_data_fld_min

        if args.eq_data_fld_max:
            kwargs['max_val'] = args.eq_data_fld_max

        eq_data_fld = \
            PROJECT.update_or_create_equipment_data_field(
                equipment_general_type_name=args.eq_gen_tp_name,
                equipment_data_field_name=args.eq_data_fld_name,
                control=args.eq_data_fld_control,
                cat=args.eq_data_fld_cat,
                equipment_unique_type_names_incl=args.eq_unq_tp_lookups,
                **kwargs)

        eq_unq_tp_strs = \
            [str(eq_unq_tp)
             for eq_unq_tp in eq_data_fld.equipment_unique_types.all()]

        results = \
            {str(eq_data_fld):
                {'Equipment General Type': str(eq_data_fld.equipment_general_type),
                 '{:,} Equipment Unique Types'.format(len(eq_unq_tp_strs)): eq_unq_tp_strs}}

    else:
        assert db_op == VIEW_DB_OP, \
            '*** 2nd SUB-COMMENT MUST BE AMONG: {}, {}, {}, {} & {} ***'.format(
                COUNT_DB_OP, LIST_DB_OP, CREATE_DB_OP, UPDATE_DB_OP, VIEW_DB_OP)

        eq_gen_tp_name = clean_lower_str(args.eq_gen_tp)
        eq_data_fld_name = clean_lower_str(args.eq_data_fld_name)

        eq_data_fld = \
            PROJECT.equipment_data_field(
                equipment_general_type_name=args.eq_gen_tp_name,
                equipment_data_field_name=args.eq_data_fld_name,
                control=args.eq_data_fld_control)

        eq_unq_tp_strs = \
            [str(eq_unq_tp)
             for eq_unq_tp in eq_data_fld.equipment_unique_types.all()]

        results = \
            {str(eq_data_fld):
                 {'Equipment General Type': str(eq_data_fld.equipment_general_type),
                  '{:,} Equipment Unique Type Groups'.format(len(eq_unq_tp_strs)): eq_unq_tp_strs}}

elif rom == EQ_UNQ_TP_GRP_ROM:
    if db_op in (COUNT_DB_OP, LIST_DB_OP):
        if args.eq_unq_tp_grp_lookups:
            if args.lookup_type == IN_LOOKUP_TYPE:
                eq_unq_tp_grps = \
                    PROJECT.data.EquipmentUniqueTypeGroups.filter(name=args.eq_unq_tp_grp_lookups[0]) \
                    if len(args.eq_unq_tp_grp_lookups) == 1 \
                    else PROJECT.data.EquipmentUniqueTypeGroups.filter(name__in=args.eq_unq_tp_grp_lookups)

            else:
                for i, eq_unq_tp_grp_lookup in enumerate(args.eq_unq_tp_grp_lookups):
                    _filtered_eq_unq_tp_grps = \
                        PROJECT.data.EquipmentUniqueTypeGroups.filter(
                            **{'name__{}'.format(args.lookup_type): eq_unq_tp_grp_lookup})

                    if i:
                        eq_unq_tp_grps |= _filtered_eq_unq_tp_grps

                    else:
                        eq_unq_tp_grps = _filtered_eq_unq_tp_grps

        else:
            eq_unq_tp_grps = PROJECT.data.EquipmentUniqueTypeGroups.all()

        if args.eq_gen_tp_lookups:
            eq_unq_tp_grps = \
                eq_unq_tp_grps.filter(
                    equipment_general_type__name=args.eq_gen_tp_lookups[0]) \
                if len(args.eq_gen_tp_lookups) == 1 \
                else eq_unq_tp_grps.filter(
                    equipment_general_type__name__in=args.eq_gen_tp_lookups)

        if args.eq_unq_tp_lookups:
            eq_unq_tp_grps = \
                eq_unq_tp_grps.filter(
                    equipment_unique_types__name=args.eq_unq_tp_lookups[0]) \
                if len(args.eq_unq_tp_lookups) == 1 \
                else eq_unq_tp_grps.filter(
                    equipment_unique_types__name__in=args.eq_unq_tp_lookups)

        if args.excl_lookups:
            eq_unq_tp_grps = PROJECT.data.EquipmentUniqueTypeGroups.difference(eq_unq_tp_grps)

        if db_op == COUNT_DB_OP:
            results = eq_unq_tp_grps.count()

        else:
            results = \
                [str(eq_unq_tp_grp)
                 for eq_unq_tp_grp in eq_unq_tp_grps]

            print('\n{:,} Equipment Unique Type Group(s)'.format(len(results)))

    elif db_op in (CREATE_DB_OP, UPDATE_DB_OP):
        eq_gen_tp_grp = \
            PROJECT.update_or_create_equipment_unique_type_group(
                equipment_general_type_name=args.eq_gen_tp_name,
                equipment_unique_type_group_name=args.eq_unq_tp_grp_name,
                equipment_unique_type_names_incl=args.eq_unq_tp_lookups)

        eq_gen_tp_strs = \
            [str(eq_gen_tp)
             for eq_gen_tp in eq_gen_tp_grp.equipment_unique_types.all()]

        results = \
            {str(eq_gen_tp_grp):
                {'Equipment General Type': str(eq_gen_tp_grp.equipment_general_type),
                 '{:,} Equipment Unique Types'.format(len(eq_gen_tp_strs)): eq_gen_tp_strs}}

    else:
        assert db_op == VIEW_DB_OP, \
            '*** 2nd SUB-COMMENT MUST BE AMONG: {}, {}, {}, {} & {} ***'.format(
                COUNT_DB_OP, LIST_DB_OP, CREATE_DB_OP, UPDATE_DB_OP, VIEW_DB_OP)

        eq_gen_tp_name = clean_lower_str(args.eq_gen_tp)
        eq_unq_tp_grp_name = clean_lower_str(args.eq_unq_tp_grp)

        eq_gen_tp_grp = \
            PROJECT.equipment_unique_type_group(
                equipment_general_type_name=eq_gen_tp_name,
                equipment_unique_type_group_name=eq_unq_tp_grp_name)

        eq_unq_tp_strs = \
            [str(eq_unq_tp)
             for eq_unq_tp in eq_gen_tp_grp.equipment_unique_types]

        results = \
            {str(eq_gen_tp_grp):
                {'Equipment General Type': str(eq_gen_tp_grp.equipment_general_type),
                 '{:,} Equipment Unique Types'.format(len(eq_unq_tp_strs)): eq_unq_tp_strs}}


elif rom == EQ_UNQ_TP_ROM:
    if db_op in (COUNT_DB_OP, LIST_DB_OP):
        if args.eq_unq_tp_lookups:
            if args.lookup_type == IN_LOOKUP_TYPE:
                eq_unq_tps = \
                    PROJECT.data.EquipmentUniqueTypes.filter(name=args.eq_unq_tp_lookups[0]) \
                    if len(args.eq_unq_tp_lookups) == 1 \
                    else PROJECT.data.EquipmentUniqueTypes.filter(name__in=args.eq_unq_tp_lookups)

            else:
                for i, eq_unq_tp_lookup in enumerate(args.eq_unq_tp_lookups):
                    _filtered_eq_unq_tps = \
                        PROJECT.data.EquipmentUniqueTypes.filter(
                            **{'name__{}'.format(args.lookup_type): eq_unq_tp_lookup})

                    if i:
                        eq_unq_tps |= _filtered_eq_unq_tps

                    else:
                        eq_unq_tps = _filtered_eq_unq_tps

        else:
            eq_unq_tps = PROJECT.data.EquipmentUniqueTypes.all()

        if args.eq_gen_tp_lookups:
            eq_unq_tps = \
                eq_unq_tps.filter(
                    equipment_general_type__name=args.eq_gen_tp_lookups[0]) \
                if len(args.eq_gen_tp_lookups) == 1 \
                else eq_unq_tps.filter(
                    equipment_general_type__name__in=args.eq_gen_tp_lookups)

        if args.eq_unq_tp_grp_lookups:
            eq_unq_tps = \
                eq_unq_tps.filter(
                    groups__name=args.eq_unq_tp_grp_lookups[0]) \
                if len(args.eq_unq_tp_grp_lookups) == 1 \
                else eq_unq_tps.filter(
                    groups__name__in=args.eq_unq_tp_grp_lookups)

        if args.excl_lookups:
            eq_unq_tps = \
                PROJECT.data.EquipmentUniqueTypes.difference(eq_unq_tps)

        if db_op == COUNT_DB_OP:
            results = eq_unq_tps.count()

        else:
            results = \
                [str(eq_unq_tp)
                 for eq_unq_tp in eq_unq_tps]

            print('\n{:,} Equipment Unique Type(s)'.format(len(results)))

    elif db_op in (CREATE_DB_OP, UPDATE_DB_OP):
        eq_unq_tp = \
            PROJECT.update_or_create_equipment_unique_type(
                equipment_general_type_name=args.eq_gen_tp_name,
                equipment_unique_type_name=args.eq_unq_tp_name,
                equipment_unique_type_group_names_incl=args.eq_unq_tp_grp_lookups)

        eq_unq_grp_strs = \
            [str(eq_unq_grp)
             for eq_unq_grp in eq_unq_tp.groups.all()]

        results = \
            {str(eq_unq_tp):
                {'Equipment General Type': str(eq_unq_tp.equipment_general_type),
                 '{:,} Equipment Unique Type Groups'.format(len(eq_unq_grp_strs)): eq_unq_grp_strs}}

    else:
        assert db_op == VIEW_DB_OP, \
            '*** 2nd SUB-COMMENT MUST BE AMONG: {}, {}, {}, {} & {} ***'.format(
                COUNT_DB_OP, LIST_DB_OP, CREATE_DB_OP, UPDATE_DB_OP, VIEW_DB_OP)

        eq_gen_tp_name = clean_lower_str(args.eq_gen_tp)
        eq_unq_tp_name = clean_lower_str(args.eq_unq_tp)

        eq_unq_tp = \
            PROJECT.equipment_unique_type(
                equipment_general_type_name=eq_gen_tp_name,
                equipment_unique_type_name=eq_unq_tp_name)

        eq_unq_tp_grp_strs = \
            [str(eq_unq_tp_grp)
             for eq_unq_tp_grp in eq_unq_tp.groups.all()]

        results = \
            {str(eq_unq_tp):
                {'Equipment General Type': str(eq_unq_tp.equipment_general_type),
                 '{:,} Equipment Unique Type Groups'.format(len(eq_unq_tp_grp_strs)): eq_unq_tp_grp_strs}}

else:
    assert rom == EQ_INST_ROM, \
        '*** 1st SUB-COMMAND MUST BE AMONG: {}, {}, {}, {} & {}  ***'.format(
            EQ_GEN_TP_ROM, EQ_DATA_FLD_ROM, EQ_UNQ_TP_GRP_ROM, EQ_UNQ_TP_ROM, EQ_INST_ROM)

    if db_op in (COUNT_DB_OP, LIST_DB_OP):
        if args.eq_lookups:
            if args.lookup_type == IN_LOOKUP_TYPE:
                eqs = PROJECT.data.EquipmentInstances.filter(name=args.eq_lookups[0]) \
                    if len(args.eq_lookups) == 1 \
                    else PROJECT.data.EquipmentInstances.filter(name__in=args.eq_lookups)

            else:
                for i, eq_lookup in enumerate(args.eq_lookups):
                    _filtered_eqs = \
                        PROJECT.data.EquipmentInstances.filter(
                            **{'name__{}'.format(args.lookup_type): eq_lookup})

                    if i:
                        eqs |= _filtered_eqs

                    else:
                        eqs = _filtered_eqs

        else:
            eqs = PROJECT.data.EquipmentInstances.all()

        if args.eq_gen_tp_lookups:
            eqs = eqs.filter(
                    equipment_general_type__name=args.eq_gen_tp_lookups[0]) \
                if len(args.eq_gen_tp_lookups) == 1 \
                else eqs.filter(
                    equipment_general_type__name__in=args.eq_gen_tp_lookups)

        if args.eq_unq_tp_lookups:
            eqs = eqs.filter(
                    equipment_unique_type__name=args.eq_unq_tp_lookups[0]) \
                if len(args.eq_unq_tp_lookups) == 1 \
                else eqs.filter(
                    equipment_unique_type__name__in=args.eq_unq_tp_lookups)

        if args.eq_data_fld_lookups:
            eqs = eqs.filter(
                    data_fields__name=args.eq_data_fld_lookups[0]) \
                if len(args.eq_data_fld_lookups) == 1 \
                else eqs.filter(
                    data_fields__name__in=args.eq_data_fld_lookups)

        if args.excl_lookups:
            eqs = PROJECT.data.EquipmentInstances.difference(eqs)

        if db_op == COUNT_DB_OP:
            results = eqs.count()

        else:
            results = [str(eq) for eq in eqs]

            print('\n{:,} Equipment Instance(s)'.format(len(results)))

    elif db_op in (CREATE_DB_OP, UPDATE_DB_OP):
        eq = PROJECT.update_or_create_equipment_instance(
            equipment_general_type_name=args.eq_gen_tp_name,
            name=args.eq_name,
            equipment_unique_type_name=args.eq_unq_tp_lookups[0])

        results = \
            {str(eq):
                 {'Equipment General Type': str(eq.equipment_general_type),
                  'Equipment Unique Type': str(eq.equipment_unique_type)}}

    else:
        assert db_op == VIEW_DB_OP, \
            '*** 2nd SUB-COMMENT MUST BE AMONG: {}, {}, {}, {} & {} ***'.format(
                COUNT_DB_OP, LIST_DB_OP, CREATE_DB_OP, UPDATE_DB_OP, VIEW_DB_OP)

        eq_gen_tp_name = clean_lower_str(args.eq_gen_tp)
        eq_name = clean_lower_str(args.eq_name)

        eq = PROJECT.equipment_instance(
                equipment_general_type_name=eq_gen_tp_name,
                equipment_instance_name=eq_name)

        results = \
            {str(eq):
                {'Equipment General Type': str(eq.equipment_general_type),
                 'Equipment Unique Type': str(eq.equipment_unique_type)}}


if args.output_file_path:
    if args.output_format == _JSON_FMT:
        if args.verbose:
            print('\n',
                json.dumps(
                    obj=results,
                    skipkeys=False,
                    ensure_ascii=True,
                    check_circular=True,
                    allow_nan=True,
                    cls=None,
                    indent=2,
                    separators=None,
                    encoding='utf-8',
                    default=None,
                    sort_keys=True),
                sep='')

        json.dump(
            obj=results,
            fp=args.output_file_path,
            skipkeys=False,
            ensure_ascii=True,
            check_circular=True,
            allow_nan=True,
            cls=None,
            indent=2,
            separators=None,
            encoding='utf-8',
            default=None,
            sort_keys=True)

    else:
        if args.verbose:
            print('\n',
                yaml.safe_dump(
                    data=results,
                    stream=None,
                    default_style=None,
                    default_flow_style=False,   # collections to be always serialized in the block style
                    encoding='utf-8',
                    explicit_start=None,
                    explicit_end=None,
                    version=None,
                    tags=None,
                    canonical=None,
                    indent=2,
                    width=None,
                    allow_unicode=True,
                    line_break=None),
                sep='')

        yaml.safe_dump(
            data=results,
            stream=None,
            default_style=None,
            default_flow_style=False,   # collections to be always serialized in the block style
            encoding='utf-8',
            explicit_start=None,
            explicit_end=None,
            version=None,
            tags=None,
            canonical=None,
            indent=2,
            width=None,
            allow_unicode=True,
            line_break=None)

else:
    if args.output_format == _JSON_FMT:
        print('\n',
            json.dumps(
                obj=results,
                skipkeys=False,
                ensure_ascii=True,
                check_circular=True,
                allow_nan=True,
                cls=None,
                indent=2,
                separators=None,
                encoding='utf-8',
                default=None,
                sort_keys=True),
            sep='')

    else:
        print('\n',
            yaml.safe_dump(
                data=results,
                stream=None,
                default_style=None,
                default_flow_style=False,   # collections to be always serialized in the block style
                encoding='utf-8',
                explicit_start=None,
                explicit_end=None,
                version=None,
                tags=None,
                canonical=None,
                indent=2,
                width=None,
                allow_unicode=True,
                line_break=None),
            sep='')
