#!/usr/bin/env python


from __future__ import print_function
import argparse
import json
import os
from ruamel import yaml

from arimo.util import Namespace

from arimo.IoT.DataAdmin import Project, project
from arimo.IoT.DataAdmin.util import clean_lower_str, _JSON_EXT, _JSON_FMT, _YAML_EXT, _YAML_FMT


IN_LOOKUP = 'in'
CONTAINS_LOOKUP = 'contains'
STARTSWITH_LOOKUP = 'startswith'
ENDSWITH_LOOKUP = 'endswith'
REGEX_LOOKUP = 'regex'


ROM_ARG_NAME = 'rom'

EQ_GEN_TP_ROM = 'eq-gen-tp'
EQ_DATA_FLD_ROM = 'eq-data-fld'
EQ_UNQ_TP_GRP_ROM = 'eq-unq-tp-grp'
EQ_UNQ_TP_ROM = 'eq-unq-tp'
EQ_INST_ROM = 'eq'


CMD_ARG_NAME = 'cmd'

COUNT_CMD = 'count'
LIST_CMD = 'list'
CREATE_CMD = 'create'
UPDATE_CMD = 'update'


# MASTER PARSER
parser = \
    argparse.ArgumentParser(
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=None,   # The global default value for arguments (default: None)
            # *** SUPPRESS cannot be used with store_true/store_false/store_const actions ***
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# project name
parser.add_argument(
    '--project',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    help='{} <ProjectName> associated with "{}/<ProjectName>{}" config file (default: None, corresponding to default TEST project)'
        .format(Project.__qual_name__(), Project.CONFIG_DIR_PATH, _YAML_EXT),
        # A brief description of what the argument does.
    metavar=None,  # A name for the argument in usage messages.
    dest=None,   # The name of the attribute to be added to the object returned by parse_args().
    required=False)


# output format
parser.add_argument(
    '--fmt',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=_YAML_FMT,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    help='output format (default: {})'.format(_YAML_FMT.upper()),   # A brief description of what the argument does.
    metavar=None,  # A name for the argument in usage messages.
    dest=None,   # The name of the attribute to be added to the object returned by parse_args().
    required=False)


# output file
parser.add_argument(
    '-o', '--out',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    help='path of file to dump output (default: None)',   # A brief description of what the argument does.
    metavar=None,  # A name for the argument in usage messages.
    dest=None,   # The name of the attribute to be added to the object returned by parse_args().
    required=False)


# verbosity
parser.add_argument(
    '-v', '--verbose',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action='store_true',   # The basic type of action to be taken when this argument is encountered at the command line.
    # nargs=None,   # The number of command-line arguments that should be consumed.
    # const=None,   # A constant value required by some action and nargs selections.
    default=False,   # The value produced if the argument is absent from the command line.
    # type=None,   # The type to which the command-line argument should be converted.
    help='whether to print verbose info',   # A brief description of what the argument does.
    # metavar=None,  # A name for the argument in usage messages.
    dest=None,   # The name of the attribute to be added to the object returned by parse_args().
    required=False)


# lookups
parser.add_argument(
    '--excl',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action='store_true',   # The basic type of action to be taken when this argument is encountered at the command line.
    # nargs=None,   # The number of command-line arguments that should be consumed.
    # const=None,   # A constant value required by some action and nargs selections.
    default=False,   # The value produced if the argument is absent from the command line.
    # type=None,   # The type to which the command-line argument should be converted.
    help='whether to exclude looked-up ROM objects',   # A brief description of what the argument does.
    # metavar=None,  # A name for the argument in usage messages.
    dest=None,   # The name of the attribute to be added to the object returned by parse_args().
    required=False)

parser.add_argument(
    '--lookup',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=IN_LOOKUP,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    help='look-up method, 1 of "{}" (default), "{}", "{}", "{}" and "{}"'
        .format(IN_LOOKUP, CONTAINS_LOOKUP, STARTSWITH_LOOKUP, ENDSWITH_LOOKUP, REGEX_LOOKUP),
        # A brief description of what the argument does.
    metavar=None,  # A name for the argument in usage messages.
    dest=None,   # The name of the attribute to be added to the object returned by parse_args().
    required=False)


parser.add_argument(
    '--eq-gen-tp',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    help='Equipment General Type name(s) for look-ups',   # A brief description of what the argument does.
    # metavar=None,  # A name for the argument in usage messages.
    dest='eq_gen_tp_lookups',   # The name of the attribute to be added to the object returned by parse_args().
    required=False)

parser.add_argument(
    '--eq-data-fld',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    help='Equipment Data Field name(s) for look-ups',   # A brief description of what the argument does.
    # metavar=None,  # A name for the argument in usage messages.
    dest='eq_data_fld_lookups',   # The name of the attribute to be added to the object returned by parse_args().
    required=False)

parser.add_argument(
    '--eq-unq-tp-grp',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    help='Equipment Unique Type Group name(s) for look-ups',   # A brief description of what the argument does.
    # metavar=None,  # A name for the argument in usage messages.
    dest='eq_unq_tp_grp_lookups',   # The name of the attribute to be added to the object returned by parse_args().
    required=False)

parser.add_argument(
    '--eq-unq-tp',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    help='Equipment Unique Type name(s) for look-ups',   # A brief description of what the argument does.
    # metavar=None,  # A name for the argument in usage messages.
    dest='eq_unq_tp_lookups',   # The name of the attribute to be added to the object returned by parse_args().
    required=False)

parser.add_argument(
    '--eq',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    help='Equipment Instance ID(s) for look-ups',   # A brief description of what the argument does.
    # metavar=None,  # A name for the argument in usage messages.
    dest='eq_lookups',   # The name of the attribute to be added to the object returned by parse_args().
    required=False)


# ROM SUB-PARSERS
rom_sub_parsers = \
    parser.add_subparsers(
        title=None,   # title for the sub-parser group in help output; by default 'subcommands' if description is provided, otherwise uses title for positional arguments
        description=None,  # description for the sub-parser group in help output, by default None
        prog=None,   # usage information that will be displayed with sub-command help, by default the name of the program and any positional arguments before the subparser argument
        parser_class=argparse.ArgumentParser,   # class which will be used to create sub-parser instances, by default the class of the current parser (e.g. ArgumentParser)
        # action=None,   # the basic type of action to be taken when this argument is encountered at the command line
            # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'prog' ***
        dest=ROM_ARG_NAME,   # name of the attribute under which sub-command name will be stored; by default None and no value is stored
        help='1st Sub-Command: a Relational Object Model (ROM) Class',   # help for sub-parser group in help output, by default None
        metavar=None   # string presenting available sub-commands in help; by default it is None and presents sub-commands in form {cmd1, cmd2, ..}
    )


# Equipment General Types
parser___eq_gen_tp = \
    rom_sub_parsers.add_parser(
        name=EQ_GEN_TP_ROM,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment General Types: command sub-parsers
eq_gen_tp___cmd_sub_parsers = \
    parser___eq_gen_tp.add_subparsers(
        title=None,   # title for the sub-parser group in help output; by default 'subcommands' if description is provided, otherwise uses title for positional arguments
        description=None,  # description for the sub-parser group in help output, by default None
        prog=None,   # usage information that will be displayed with sub-command help, by default the name of the program and any positional arguments before the subparser argument
        parser_class=argparse.ArgumentParser,   # class which will be used to create sub-parser instances, by default the class of the current parser (e.g. ArgumentParser)
        # action=None,   # the basic type of action to be taken when this argument is encountered at the command line
            # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'prog' ***
        dest=CMD_ARG_NAME,   # name of the attribute under which sub-command name will be stored; by default None and no value is stored
        help='2nd Sub-Command: a Database Command',   # help for sub-parser group in help output, by default None
        metavar=None   # string presenting available sub-commands in help; by default it is None and presents sub-commands in form {cmd1, cmd2, ..}
    )


# Equipment General Types: COUNT
parser___eq_gen_tp___count = \
    eq_gen_tp___cmd_sub_parsers.add_parser(
        name=COUNT_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment General Types: LIST
parser___eq_gen_tp___list = \
    eq_gen_tp___cmd_sub_parsers.add_parser(
        name=LIST_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment General Types: CREATE
parser___eq_gen_tp___create = \
    eq_gen_tp___cmd_sub_parsers.add_parser(
        name=CREATE_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )

parser___eq_gen_tp___create.add_argument(
    'eq_gen_tp_names',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs='+',   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=[],   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    help='Equipment General Type names to create',   # A brief description of what the argument does.
    metavar=None,  # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
    # required=True
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
)


# Equipment General Types: UPDATE
parser___eq_gen_tp___update = \
    eq_gen_tp___cmd_sub_parsers.add_parser(
        name=UPDATE_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )

parser___eq_gen_tp___update.add_argument(
    'curr_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    help='current Equipment General Type name to update',   # A brief description of what the argument does.
    metavar=None,  # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
    # required=True
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
)


parser___eq_gen_tp___update.add_argument(
    'new_name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    help='new Equipment General Type name to update',   # A brief description of what the argument does.
    metavar=None,  # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
    # required=True
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
)


# Equipment Data Fields
parser___eq_data_fld = \
    rom_sub_parsers.add_parser(
        name=EQ_DATA_FLD_ROM,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )

# Equipment Data Fields: command sub-parsers
eq_data_fld___cmd_sub_parsers = \
    parser___eq_data_fld.add_subparsers(
        title=None,   # title for the sub-parser group in help output; by default 'subcommands' if description is provided, otherwise uses title for positional arguments
        description=None,  # description for the sub-parser group in help output, by default None
        prog=None,   # usage information that will be displayed with sub-command help, by default the name of the program and any positional arguments before the subparser argument
        parser_class=argparse.ArgumentParser,   # class which will be used to create sub-parser instances, by default the class of the current parser (e.g. ArgumentParser)
        # action=None,   # the basic type of action to be taken when this argument is encountered at the command line
            # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'prog' ***
        dest=CMD_ARG_NAME,   # name of the attribute under which sub-command name will be stored; by default None and no value is stored
        help='2nd Sub-Command: a Database Command',   # help for sub-parser group in help output, by default None
        metavar=None   # string presenting available sub-commands in help; by default it is None and presents sub-commands in form {cmd1, cmd2, ..}
    )


# Equipment Data Fields: COUNT
parser___eq_data_fld___count = \
    eq_data_fld___cmd_sub_parsers.add_parser(
        name=COUNT_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Data Fields: LIST
parser___eq_data_fld___list = \
    eq_data_fld___cmd_sub_parsers.add_parser(
        name=LIST_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Data Fields: CREATE
parser___eq_data_fld___create = \
    eq_data_fld___cmd_sub_parsers.add_parser(
        name=CREATE_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Data Fields: UPDATE
parser___eq_data_fld___update = \
    eq_data_fld___cmd_sub_parsers.add_parser(
        name=UPDATE_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Unique Type Groups
parser___eq_unq_tp_grp = \
    rom_sub_parsers.add_parser(
        name=EQ_UNQ_TP_GRP_ROM,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )

# Equipment Unique Type Groups: command sub-parsers
eq_unq_tp_grp___cmd_sub_parsers = \
    parser___eq_unq_tp_grp.add_subparsers(
        title=None,   # title for the sub-parser group in help output; by default 'subcommands' if description is provided, otherwise uses title for positional arguments
        description=None,  # description for the sub-parser group in help output, by default None
        prog=None,   # usage information that will be displayed with sub-command help, by default the name of the program and any positional arguments before the subparser argument
        parser_class=argparse.ArgumentParser,   # class which will be used to create sub-parser instances, by default the class of the current parser (e.g. ArgumentParser)
        # action=None,   # the basic type of action to be taken when this argument is encountered at the command line
            # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'prog' ***
        dest=CMD_ARG_NAME,   # name of the attribute under which sub-command name will be stored; by default None and no value is stored
        help='2nd Sub-Command: a Database Command',   # help for sub-parser group in help output, by default None
        metavar=None   # string presenting available sub-commands in help; by default it is None and presents sub-commands in form {cmd1, cmd2, ..}
    )


# Equipment Unique Type Groups: COUNT
parser___eq_unq_tp_grp___count = \
    eq_unq_tp_grp___cmd_sub_parsers.add_parser(
        name=COUNT_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Unique Type Groups: LIST
parser___eq_unq_tp_grp___list = \
    eq_unq_tp_grp___cmd_sub_parsers.add_parser(
        name=LIST_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Unique Type Groups: CREATE
parser___eq_unq_tp_grp___create = \
    eq_unq_tp_grp___cmd_sub_parsers.add_parser(
        name=CREATE_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Unique Type Groups: UPDATE
parser___eq_unq_tp_grp___update = \
    eq_unq_tp_grp___cmd_sub_parsers.add_parser(
        name=UPDATE_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Unique Types
parser___eq_unq_tp = \
    rom_sub_parsers.add_parser(
        name=EQ_UNQ_TP_ROM,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )

# Equipment Unique Types: command sub-parsers
eq_unq_tp___cmd_sub_parsers = \
    parser___eq_unq_tp.add_subparsers(
        title=None,   # title for the sub-parser group in help output; by default 'subcommands' if description is provided, otherwise uses title for positional arguments
        description=None,  # description for the sub-parser group in help output, by default None
        prog=None,   # usage information that will be displayed with sub-command help, by default the name of the program and any positional arguments before the subparser argument
        parser_class=argparse.ArgumentParser,   # class which will be used to create sub-parser instances, by default the class of the current parser (e.g. ArgumentParser)
        # action=None,   # the basic type of action to be taken when this argument is encountered at the command line
            # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'prog' ***
        dest=CMD_ARG_NAME,   # name of the attribute under which sub-command name will be stored; by default None and no value is stored
        help='2nd Sub-Command: a Database Command',   # help for sub-parser group in help output, by default None
        metavar=None   # string presenting available sub-commands in help; by default it is None and presents sub-commands in form {cmd1, cmd2, ..}
    )


# Equipment Unique Types: COUNT
parser___eq_unq_tp___count = \
    eq_unq_tp___cmd_sub_parsers.add_parser(
        name=COUNT_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Unique Types: LIST
parser___eq_unq_tp___list = \
    eq_unq_tp___cmd_sub_parsers.add_parser(
        name=LIST_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Unique Types: CREATE
parser___eq_unq_tp___create = \
    eq_unq_tp___cmd_sub_parsers.add_parser(
        name=CREATE_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Unique Types: UPDATE
parser___eq_unq_tp___update = \
    eq_unq_tp___cmd_sub_parsers.add_parser(
        name=UPDATE_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Instances
parser___eq = \
    rom_sub_parsers.add_parser(
        name=EQ_INST_ROM,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )

# Equipment Instances: command sub-parsers
eq___cmd_sub_parsers = \
    parser___eq.add_subparsers(
        title=None,   # title for the sub-parser group in help output; by default 'subcommands' if description is provided, otherwise uses title for positional arguments
        description=None,  # description for the sub-parser group in help output, by default None
        prog=None,   # usage information that will be displayed with sub-command help, by default the name of the program and any positional arguments before the subparser argument
        parser_class=argparse.ArgumentParser,   # class which will be used to create sub-parser instances, by default the class of the current parser (e.g. ArgumentParser)
        # action=None,   # the basic type of action to be taken when this argument is encountered at the command line
            # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'prog' ***
        dest=CMD_ARG_NAME,   # name of the attribute under which sub-command name will be stored; by default None and no value is stored
        help='2nd Sub-Command: a Database Command',   # help for sub-parser group in help output, by default None
        metavar=None   # string presenting available sub-commands in help; by default it is None and presents sub-commands in form {cmd1, cmd2, ..}
    )


# Equipment Instances: COUNT
parser___eq___count = \
    eq___cmd_sub_parsers.add_parser(
        name=COUNT_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Instances: LIST
parser___eq___list = \
    eq___cmd_sub_parsers.add_parser(
        name=LIST_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Instances: CREATE
parser___eq___create = \
    eq___cmd_sub_parsers.add_parser(
        name=CREATE_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Instances: UPDATE
parser___eq___update = \
    eq___cmd_sub_parsers.add_parser(
        name=UPDATE_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# parse args
args = Namespace(**parser.parse_args().__dict__)


assert args.lookup \
    in (IN_LOOKUP,
        CONTAINS_LOOKUP,
        STARTSWITH_LOOKUP,
        ENDSWITH_LOOKUP,
        REGEX_LOOKUP)


args.eq_gen_tp_lookups = \
    map(clean_lower_str, args.eq_gen_tp_lookups.split(',')) \
    if args.eq_gen_tp_lookups \
    else []

args.eq_data_flds = \
    map(clean_lower_str, args.eq_data_flds.split(',')) \
    if args.eq_data_flds \
    else []

args.eq_unq_tp_grps = \
    map(clean_lower_str, args.eq_unq_tp_grps.split(',')) \
    if args.eq_unq_tp_grps \
    else []

args.eq_unq_tps = \
    map(clean_lower_str, args.eq_unq_tps.split(',')) \
    if args.eq_unq_tps \
    else []

args.eqs = \
    map(clean_lower_str, args.eqs.split(',')) \
    if args.eqs \
    else []


assert args.fmt in (_JSON_FMT, _YAML_FMT)

if args.out:
    _ext = os.path.splitext(args.out)

    if (_ext == _JSON_EXT) and (args.fmt == _YAML_FMT):
        args.fmt = _JSON_FMT

    elif (_ext == _YAML_EXT) and (args.fmt == _JSON_FMT):
        args.fmt = _YAML_FMT


if args.verbose:
    print(args)


# connect to database
PROJECT = project(name=args.project)


# work
rom = args[ROM_ARG_NAME]
cmd = args[CMD_ARG_NAME]

if rom == EQ_GEN_TP_ROM:
    if cmd in (COUNT_CMD, LIST_CMD):
        if args.eq_gen_tp_lookups:
            if args.lookup == IN_LOOKUP:
                eq_gen_tps = \
                    (PROJECT.data.EquipmentGeneralTypes.exclude(name=args.eq_gen_tp_lookups[0])
                     if args.excl
                     else PROJECT.data.EquipmentGeneralTypes.filter(name=args.eq_gen_tp_lookups[0])) \
                    if len(args.eq_gen_tp_lookups) == 1 \
                    else (PROJECT.data.EquipmentGeneralTypes.exclude(name__in=args.eq_gen_tp_lookups)
                          if args.excl
                          else PROJECT.data.EquipmentGeneralTypes.filter(name__in=args.eq_gen_tp_lookups))

            else:
                for i, eq_gen_tp_lookup in enumerate(args.eq_gen_tp_lookups):
                    _eq_gen_tps = \
                        PROJECT.data.EquipmentGeneralTypes.filter(
                            **{'name__{}'.format(args.lookup): eq_gen_tp_lookup})

                    if i:
                        eq_gen_tps |= _eq_gen_tps

                    else:
                        eq_gen_tps = _eq_gen_tps

                if args.excl:
                    eq_gen_tps = PROJECT.data.EquipmentGeneralTypes.all().difference(eq_gen_tps)

        else:
            eq_gen_tps = PROJECT.data.EquipmentGeneralTypes.all()

        if cmd == COUNT_CMD:
            results = eq_gen_tps.count()

        else:
            results = map(str, eq_gen_tps)

            print('{:,} Equipment General Type(s)'.format(len(results)))

    elif cmd == CREATE_CMD:
        results = \
            [str(PROJECT.create_equipment_general_type(
                equipment_general_type_name=eq_gen_tp_name))
             for eq_gen_tp_name in args.names]

        print('{:,} Equipment General Type(s)'.format(len(results)))

    else:
        assert cmd == UPDATE_CMD, \
            '*** 2nd SUB-COMMENT MUST BE AMONG: {}, {}, {} & {} ***'.format(
                COUNT_CMD, LIST_CMD, CREATE_CMD, UPDATE_CMD)

        eq_gen_tp = \
            PROJECT.equipment_general_type(
                equipment_general_type_name=args.curr_name)

        new_name = clean_lower_str(args.new_name)

        if new_name != eq_gen_tp.name:
            eq_gen_tp.name = new_name
            eq_gen_tp.save()

        results = str(eq_gen_tp)

elif rom == EQ_DATA_FLD_ROM:
    results = None

elif rom == EQ_UNQ_TP_GRP_ROM:
    results = None

elif rom == EQ_UNQ_TP_ROM:
    results = None

else:
    assert rom == EQ_INST_ROM, \
        '*** 1st SUB-COMMAND MUST BE AMONG: {}, {}, {}, {} & {}  ***'.format(
            EQ_GEN_TP_ROM, EQ_DATA_FLD_ROM, EQ_UNQ_TP_GRP_ROM, EQ_UNQ_TP_ROM, EQ_INST_ROM)

    results = None


if args.out:
    if args.fmt == _JSON_FMT:
        if args.verbose:
            print(json.dumps(
                obj=results,
                skipkeys=False,
                ensure_ascii=True,
                check_circular=True,
                allow_nan=True,
                cls=None,
                indent=2,
                separators=None,
                encoding='utf-8',
                default=None,
                sort_keys=True))

        json.dump(
            obj=results,
            fp=args.out,
            skipkeys=False,
            ensure_ascii=True,
            check_circular=True,
            allow_nan=True,
            cls=None,
            indent=2,
            separators=None,
            encoding='utf-8',
            default=None,
            sort_keys=True)

    else:
        if args.verbose:
            print(yaml.safe_dump(
                data=results,
                stream=None,
                default_style=None,
                default_flow_style=False,   # collections to be always serialized in the block style
                encoding='utf-8',
                explicit_start=None,
                explicit_end=None,
                version=None,
                tags=None,
                canonical=None,
                indent=2,
                width=None,
                allow_unicode=True,
                line_break=None))

        print(yaml.safe_dump(
            data=results,
            stream=None,
            default_style=None,
            default_flow_style=False,   # collections to be always serialized in the block style
            encoding='utf-8',
            explicit_start=None,
            explicit_end=None,
            version=None,
            tags=None,
            canonical=None,
            indent=2,
            width=None,
            allow_unicode=True,
            line_break=None))

else:
    if args.fmt == _JSON_FMT:
        print(json.dumps(
            obj=results,
            skipkeys=False,
            ensure_ascii=True,
            check_circular=True,
            allow_nan=True,
            cls=None,
            indent=2,
            separators=None,
            encoding='utf-8',
            default=None,
            sort_keys=True))

    else:
        print(yaml.safe_dump(
            data=results,
            stream=None,
            default_style=None,
            default_flow_style=False,   # collections to be always serialized in the block style
            encoding='utf-8',
            explicit_start=None,
            explicit_end=None,
            version=None,
            tags=None,
            canonical=None,
            indent=2,
            width=None,
            allow_unicode=True,
            line_break=None))
