#!/usr/bin/env python


from __future__ import print_function
import argparse
import json
import os
from ruamel import yaml

from arimo.util import Namespace

from arimo.IoT.DataAdmin import project
from arimo.IoT.DataAdmin.util import clean_lower_str, _JSON_EXT, _JSON_FMT, _YAML_EXT, _YAML_FMT


OBJ_CLASS_ARG_NAME = 'obj_class'

EQ_GEN_TP_OBJ_CLASS = 'eq-gen-tp'
EQ_DATA_FLD_OBJ_CLASS = 'eq-data-fld'
EQ_UNQ_TP_GRP_OBJ_CLASS = 'eq-unq-tp-grp'
EQ_UNQ_TP_OBJ_CLASS = 'eq-unq-tp'
EQ_INST_OBJ_CLASS = 'eq'


CMD_ARG_NAME = 'cmd'

COUNT_CMD = 'count'
LIST_CMD = 'list'
CREATE_CMD = 'create'
UPDATE_CMD = 'update'


# MASTER PARSER
parser = \
    argparse.ArgumentParser(
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=None,   # The global default value for arguments (default: None)
            # *** SUPPRESS cannot be used with store_true/store_false/store_const actions ***
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# project name
parser.add_argument(
    '--project',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    help=None,   # A brief description of what the argument does.
    metavar=None,  # A name for the argument in usage messages.
    dest=None   # The name of the attribute to be added to the object returned by parse_args().
)


# output format
parser.add_argument(
    '--fmt',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=_YAML_FMT,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    help=None,   # A brief description of what the argument does.
    metavar=None,  # A name for the argument in usage messages.
    dest=None   # The name of the attribute to be added to the object returned by parse_args().
)


# output file
parser.add_argument(
    '-o', '--out',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    help=None,   # A brief description of what the argument does.
    metavar=None,  # A name for the argument in usage messages.
    dest=None   # The name of the attribute to be added to the object returned by parse_args().
)


# verbosity
parser.add_argument(
    '-v', '--verbose',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action='store_true',   # The basic type of action to be taken when this argument is encountered at the command line.
    # nargs=None,   # The number of command-line arguments that should be consumed.
    # const=None,   # A constant value required by some action and nargs selections.
    default=False,   # The value produced if the argument is absent from the command line.
    # type=None,   # The type to which the command-line argument should be converted.
    help=None,   # A brief description of what the argument does.
    # metavar=None,  # A name for the argument in usage messages.
    dest=None   # The name of the attribute to be added to the object returned by parse_args().
)


# OBJ-CLASS SUB-PARSERS
obj_class_sub_parsers = \
    parser.add_subparsers(
        title=None,   # title for the sub-parser group in help output; by default 'subcommands' if description is provided, otherwise uses title for positional arguments
        description=None,  # description for the sub-parser group in help output, by default None
        prog=None,   # usage information that will be displayed with sub-command help, by default the name of the program and any positional arguments before the subparser argument
        parser_class=argparse.ArgumentParser,   # class which will be used to create sub-parser instances, by default the class of the current parser (e.g. ArgumentParser)
        # action=None,   # the basic type of action to be taken when this argument is encountered at the command line
            # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'prog' ***
        dest=OBJ_CLASS_ARG_NAME,   # name of the attribute under which sub-command name will be stored; by default None and no value is stored
        help=None,   # help for sub-parser group in help output, by default None
        metavar=None   # string presenting available sub-commands in help; by default it is None and presents sub-commands in form {cmd1, cmd2, ..}
    )


# Equipment General Types
parser___eq_gen_tp = \
    obj_class_sub_parsers.add_parser(
        name=EQ_GEN_TP_OBJ_CLASS,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )

parser___eq_gen_tp.add_argument(
    '--name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    help=None,   # A brief description of what the argument does.
    metavar=None,  # A name for the argument in usage messages.
    dest=None   # The name of the attribute to be added to the object returned by parse_args().
)


# Equipment General Types: command sub-parsers
eq_gen_tp___cmd_sub_parsers = \
    parser___eq_gen_tp.add_subparsers(
        title=None,   # title for the sub-parser group in help output; by default 'subcommands' if description is provided, otherwise uses title for positional arguments
        description=None,  # description for the sub-parser group in help output, by default None
        prog=None,   # usage information that will be displayed with sub-command help, by default the name of the program and any positional arguments before the subparser argument
        parser_class=argparse.ArgumentParser,   # class which will be used to create sub-parser instances, by default the class of the current parser (e.g. ArgumentParser)
        # action=None,   # the basic type of action to be taken when this argument is encountered at the command line
            # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'prog' ***
        dest=CMD_ARG_NAME,   # name of the attribute under which sub-command name will be stored; by default None and no value is stored
        help=None,   # help for sub-parser group in help output, by default None
        metavar=None   # string presenting available sub-commands in help; by default it is None and presents sub-commands in form {cmd1, cmd2, ..}
    )


# Equipment General Types: COUNT
parser___eq_gen_tp___count = \
    eq_gen_tp___cmd_sub_parsers.add_parser(
        name=COUNT_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment General Types: LIST
parser___eq_gen_tp___list = \
    eq_gen_tp___cmd_sub_parsers.add_parser(
        name=LIST_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment General Types: CREATE
parser___eq_gen_tp___create = \
    eq_gen_tp___cmd_sub_parsers.add_parser(
        name=CREATE_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )

parser___eq_gen_tp___create.add_argument(
    'names',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs='+',   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    default=[],   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    help=None,   # A brief description of what the argument does.
    metavar=None,  # A name for the argument in usage messages.
    # dest=None,   # The name of the attribute to be added to the object returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
    # required=True
        # *** DISABLED: TypeError: 'required' is an invalid argument for positionals ***
)


# Equipment General Types: UPDATE
parser___eq_gen_tp___update = \
    eq_gen_tp___cmd_sub_parsers.add_parser(
        name=UPDATE_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )

parser___eq_gen_tp___update.add_argument(
    '--name',   # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    action=None,   # The basic type of action to be taken when this argument is encountered at the command line.
    nargs=None,   # The number of command-line arguments that should be consumed.
    const=None,   # A constant value required by some action and nargs selections.
    # default=None,   # The value produced if the argument is absent from the command line.
    type=str,   # The type to which the command-line argument should be converted.
    help=None,   # A brief description of what the argument does.
    metavar=None,  # A name for the argument in usage messages.
    dest='new_name',   # The name of the attribute to be added to the object returned by parse_args().
    required=True)


# Equipment Data Fields
parser___eq_data_fld = \
    obj_class_sub_parsers.add_parser(
        name=EQ_DATA_FLD_OBJ_CLASS,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )

# Equipment Data Fields: command sub-parsers
eq_data_fld___cmd_sub_parsers = \
    parser___eq_data_fld.add_subparsers(
        title=None,   # title for the sub-parser group in help output; by default 'subcommands' if description is provided, otherwise uses title for positional arguments
        description=None,  # description for the sub-parser group in help output, by default None
        prog=None,   # usage information that will be displayed with sub-command help, by default the name of the program and any positional arguments before the subparser argument
        parser_class=argparse.ArgumentParser,   # class which will be used to create sub-parser instances, by default the class of the current parser (e.g. ArgumentParser)
        # action=None,   # the basic type of action to be taken when this argument is encountered at the command line
            # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'prog' ***
        dest=CMD_ARG_NAME,   # name of the attribute under which sub-command name will be stored; by default None and no value is stored
        help=None,   # help for sub-parser group in help output, by default None
        metavar=None   # string presenting available sub-commands in help; by default it is None and presents sub-commands in form {cmd1, cmd2, ..}
    )


# Equipment Data Fields: COUNT
parser___eq_data_fld___count = \
    eq_data_fld___cmd_sub_parsers.add_parser(
        name=COUNT_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Data Fields: LIST
parser___eq_data_fld___list = \
    eq_data_fld___cmd_sub_parsers.add_parser(
        name=LIST_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Data Fields: CREATE
parser___eq_data_fld___create = \
    eq_data_fld___cmd_sub_parsers.add_parser(
        name=CREATE_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Data Fields: UPDATE
parser___eq_data_fld___update = \
    eq_data_fld___cmd_sub_parsers.add_parser(
        name=UPDATE_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Unique Type Groups
parser___eq_unq_tp_grp = \
    obj_class_sub_parsers.add_parser(
        name=EQ_UNQ_TP_GRP_OBJ_CLASS,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )

# Equipment Unique Type Groups: command sub-parsers
eq_unq_tp_grp___cmd_sub_parsers = \
    parser___eq_unq_tp_grp.add_subparsers(
        title=None,   # title for the sub-parser group in help output; by default 'subcommands' if description is provided, otherwise uses title for positional arguments
        description=None,  # description for the sub-parser group in help output, by default None
        prog=None,   # usage information that will be displayed with sub-command help, by default the name of the program and any positional arguments before the subparser argument
        parser_class=argparse.ArgumentParser,   # class which will be used to create sub-parser instances, by default the class of the current parser (e.g. ArgumentParser)
        # action=None,   # the basic type of action to be taken when this argument is encountered at the command line
            # *** DISABLED: TypeError: __init__() got an unexpected keyword argument 'prog' ***
        dest=CMD_ARG_NAME,   # name of the attribute under which sub-command name will be stored; by default None and no value is stored
        help=None,   # help for sub-parser group in help output, by default None
        metavar=None   # string presenting available sub-commands in help; by default it is None and presents sub-commands in form {cmd1, cmd2, ..}
    )


# Equipment Unique Type Groups: COUNT
parser___eq_unq_tp_grp___count = \
    eq_unq_tp_grp___cmd_sub_parsers.add_parser(
        name=COUNT_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Unique Type Groups: LIST
parser___eq_unq_tp_grp___list = \
    eq_unq_tp_grp___cmd_sub_parsers.add_parser(
        name=LIST_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Unique Type Groups: CREATE
parser___eq_unq_tp_grp___create = \
    eq_unq_tp_grp___cmd_sub_parsers.add_parser(
        name=CREATE_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Unique Type Groups: UPDATE
parser___eq_unq_tp_grp___update = \
    eq_unq_tp_grp___cmd_sub_parsers.add_parser(
        name=UPDATE_CMD,
        prog=None,   # The name of the program (default: sys.argv[0])
        usage=None,   # The string describing the program usage (default: generated from arguments added to parser)
        description=None,   # Text to display before the argument help (default: none)
        epilog=None,   # Text to display after the argument help (default: none)
        parents=[],   # A list of ArgumentParser objects whose arguments should also be included
        formatter_class=argparse.HelpFormatter,  # A class for customizing the help output
        prefix_chars='-',   # The set of characters that prefix optional arguments (default: '-')
        fromfile_prefix_chars=None,   # The set of characters that prefix files from which additional arguments should be read (default: None)
        argument_default=argparse.SUPPRESS,   # The global default value for arguments (default: None)
        conflict_handler='error',   # The strategy for resolving conflicting optionals (usually unnecessary)
        add_help=True,   # Add a -h/--help option to the parser (default: True)
        # allow_abbrev=True   # Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)
    )


# Equipment Unique Types


# Equipment Instances


# parse args
args = Namespace(**parser.parse_args().__dict__)


assert args.fmt in (_JSON_FMT, _YAML_FMT)

if args.out:
    _ext = os.path.splitext(args.out)

    if (_ext == _JSON_EXT) and (args.fmt == _YAML_FMT):
        args.fmt = _JSON_FMT

    elif (_ext == _YAML_EXT) and (args.fmt == _JSON_FMT):
        args.fmt = _YAML_FMT


if args.verbose:
    print(args)


# connect to database
PROJECT = project(name=args.project)


# work
obj_class = args[OBJ_CLASS_ARG_NAME]
cmd = args[CMD_ARG_NAME]

if obj_class == EQ_GEN_TP_OBJ_CLASS:
    if cmd == COUNT_CMD:
        results = \
            PROJECT.data.EquipmentGeneralTypes.filter(
                name__in=
                    [clean_lower_str(eq_gen_tp_name)
                     for eq_gen_tp_name in args.name.split(',')]) \
            if args.name \
            else PROJECT.data.EquipmentGeneralTypes.count()

    elif cmd == LIST_CMD:
        results = \
            [str(eq_gen_tp)
             for eq_gen_tp in
                (PROJECT.data.EquipmentGeneralTypes.filter(
                    name__in=
                        [clean_lower_str(eq_gen_tp_name)
                         for eq_gen_tp_name in args.name.split(',')])
                 if args.name
                 else PROJECT.data.EquipmentGeneralTypes.all())]

        print('{:,} Equipment General Type(s)'.format(len(results)))

    elif cmd == CREATE_CMD:
        results = \
            [str(PROJECT.create_equipment_general_type(
                equipment_general_type_name=eq_gen_tp_name))
             for eq_gen_tp_name in args.names]

        print('{:,} Equipment General Type(s)'.format(len(results)))

    else:
        assert cmd == UPDATE_CMD, \
            '*** 2nd SUB-COMMENT MUST BE AMONG: {}, {}, {} & {} ***'.format(
                COUNT_CMD, LIST_CMD, CREATE_CMD, UPDATE_CMD)

        eq_gen_tp = \
            PROJECT.equipment_general_type(
                equipment_general_type_name=args.name)

        new_name = clean_lower_str(args.new_name)

        if new_name != eq_gen_tp.name:
            eq_gen_tp.name = new_name
            eq_gen_tp.save()

        results = str(eq_gen_tp)

elif obj_class == EQ_DATA_FLD_OBJ_CLASS:
    results = None

elif obj_class == EQ_UNQ_TP_GRP_OBJ_CLASS:
    results = None

elif obj_class == EQ_UNQ_TP_OBJ_CLASS:
    results = None

else:
    assert obj_class == EQ_INST_OBJ_CLASS, \
        '*** 1st SUB-COMMAND MUST BE AMONG: {}, {}, {}, {} & {}  ***'.format(
            EQ_GEN_TP_OBJ_CLASS, EQ_DATA_FLD_OBJ_CLASS, EQ_UNQ_TP_GRP_OBJ_CLASS, EQ_UNQ_TP_OBJ_CLASS, EQ_INST_OBJ_CLASS)

    results = None


if args.out:
    if args.fmt == _JSON_FMT:
        if args.verbose:
            print(json.dumps(
                obj=results,
                skipkeys=False,
                ensure_ascii=True,
                check_circular=True,
                allow_nan=True,
                cls=None,
                indent=2,
                separators=None,
                encoding='utf-8',
                default=None,
                sort_keys=True))

        json.dump(
            obj=results,
            fp=args.out,
            skipkeys=False,
            ensure_ascii=True,
            check_circular=True,
            allow_nan=True,
            cls=None,
            indent=2,
            separators=None,
            encoding='utf-8',
            default=None,
            sort_keys=True)

    else:
        if args.verbose:
            print(yaml.safe_dump(
                data=results,
                stream=None,
                default_style=None,
                default_flow_style=False,   # collections to be always serialized in the block style
                encoding='utf-8',
                explicit_start=None,
                explicit_end=None,
                version=None,
                tags=None,
                canonical=None,
                indent=2,
                width=None,
                allow_unicode=True,
                line_break=None))

        print(yaml.safe_dump(
            data=results,
            stream=None,
            default_style=None,
            default_flow_style=False,   # collections to be always serialized in the block style
            encoding='utf-8',
            explicit_start=None,
            explicit_end=None,
            version=None,
            tags=None,
            canonical=None,
            indent=2,
            width=None,
            allow_unicode=True,
            line_break=None))

else:
    if args.fmt == _JSON_FMT:
        print(json.dumps(
            obj=results,
            skipkeys=False,
            ensure_ascii=True,
            check_circular=True,
            allow_nan=True,
            cls=None,
            indent=2,
            separators=None,
            encoding='utf-8',
            default=None,
            sort_keys=True))

    else:
        print(yaml.safe_dump(
            data=results,
            stream=None,
            default_style=None,
            default_flow_style=False,   # collections to be always serialized in the block style
            encoding='utf-8',
            explicit_start=None,
            explicit_end=None,
            version=None,
            tags=None,
            canonical=None,
            indent=2,
            width=None,
            allow_unicode=True,
            line_break=None))
